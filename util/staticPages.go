// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x62\x71\x2e\xf1\x1e\x21\x14\x5f\x6e\xb7\x6a\x6b\x8b\x6d\xcd\xb4\xa4\xc1\xa3\x9e\x49\x4f\x4b\xc6\xb8\x54\x65\x08\x24\x90\xe3\xeb\x1d\xcb\x12\x16\xc2\xb2\x97\xa4\xb8\xbd\xc4\x4e\xae\xb6\x36\x8e\x09\xf0\xc7\x44\x23\xd9\x3f\xed\xbf\x70\xd5\xf3\xb5\x47\x1a\x21\x81\x6d\x20\x1c\x3f\xe0\xe9\xee\xd7\xef\xbd\x79\x9f\xd7\xaf\x5f\xf7\x3c\x15\x6a\xac\x6e\x02\x13\x91\x6a\x11\x9e\xa9\xc1\xd2\xd8\x58\xa1\x86\x91\x5e\x1a\x03\xa0\x50\xc7\x0c\x01\xad\x86\xa8\x83\x59\x11\x36\x58\x45\xda\x07\xe3\x81\x1a\x63\xb6\x84\x3f\x68\x18\xcd\x22\xfc\x8d\x74\xe2\x80\x74\xd0\xaa\xdb\x88\x19\x65\x13\x43\xa0\x59\x84\x61\xc2\x8a\x70\xfe\xed\x22\xd6\xab\x58\x98\x47\x50\x1d\x17\x61\xd3\xc0\x8b\xb6\x45\x99\x40\xba\x68\xe8\xac\x56\xd4\x71\xd3\xd0\xb0\xe4\x35\x26\x80\x41\x0c\x66\x20\x53\x72\x34\x64\xe2\xe2\x54\x1f\x1b\xd4\x60\x35\x8b\x0a\x4c\x4e\x19\x81\x2c\x66\x30\x13\x97\xe6\xe6\x0e\x1f\x93\xde\x79\xbf\xa0\xf8\x4d\x3e\x60\x1a\x64\x01\x50\x6c\x16\xa1\xc3\x96\x4c\xec\xd4\x30\x66\x10\xd4\x28\xae\x14\xa1\xe2\x30\xc4\x0c\x4d\x29\x5b\x16\x73\x18\x45\xb6\x5c\x37\x88\xac\x39\x8e\xcf\xd3\xd1\xa8\x61\x33\xe0\x50\x2d\x26\x3d\xf5\x41\x03\xd3\x25\x69\x5a\xde\x2b\x4f\x79\xd4\xa7\x1c\x58\x2a\x28\x3e\xe9\xc8\x02\x35\xab\x5e\xb7\x42\x49\x05\xc5\x87\x60\xac\x50\xb6\xf4\x25\x8f\x07\xef\xc0\x94\x3f\x02\x50\xd0\x8d\x26\xd0\x4c\xe4\x38\x45\x48\x50\xb3\x8c\x28\xf0\xff\x48\x3a\xa2\x0b\xa0\x5c\xf5\xff\x3a\x35\xa4\x5b\x8b\x92\x53\x87\xfe\xb4\xe4\x44\x6e\x30\x64\x10\x4c\x81\x2e\x55\x4c\x7c\x1a\x9c\x6a\x38\xcc\xa8\x2c\x49\x81\x25\xa5\x32\x66\x8b\x18\x93\x68\x32\x00\x05\x04\x18\xa2\x55\xee\x0b\x65\x13\x91\x85\xf0\x1d\xb8\x23\x38\xb3\x8a\x52\x35\x58\xad\x51\x96\x35\xab\xae\x9c\xc2\xd8\x71\x96\xf2\x8a\xae\x13\x47\xaa\x5a\x30\xa9\xae\x54\xa6\x88\xe8\xa1\x60\x64\x1a\x55\x22\x19\x0c\xd7\x1d\x49\xc3\x84\x61\x2a\xc8\xe4\x46\x6f\x56\xc1\xe9\xba\x49\x1c\x5f\xd2\xac\xa2\x2c\x2e\x2e\xca\x8b\xd3\xb2\x45\xab\x4a\x7e\x72\x72\x52\x71\x9a\x55\x08\x7c\xef\x81\xf9\x49\x08\x6a\xd8\xa8\xd6\x98\xff\x5c\x31\x4c\xb3\x08\x89\x45\x30\x04\x0e\xa3\xd6\x02\x2e\x42\xad\x41\x29\x26\xec\xa0\x65\x5a\x14\x0a\xa2\x40\x40\x21\x99\x06\xc1\x1a\xb2\x8b\x90\x5a\x0d\xa2\x43\xb1\xfb\x94\x65\x90\xde\xfe\x50\x34\x04\x88\x1a\x48\xaa\x19\xba\x8e\x49\x11\x32\xda\xc0\xd1\x9b\xd7\xa9\x94\x4f\xca\xe2\x2b\xe0\x97\xd6\xe9\x22\x9c\x04\x93\x20\x3f\x03\xf2\x33\x10\x54\x2c\xad\xe1\xa0\xb2\x89\x8b\xb0\x82\x4c\x07\x27\x2c\x01\x40\xc1\x46\xac\x06\xf4\x22\x7c\x2f\x3f\x0d\xa6\x7e\x8e\xf2\x20\x0f\xf8\xec\x29\x29\x0f\xf2\xef\x4e\x8b\x6d\x29\xff\x6f\xfb\xe2\x36\xc8\x4b\xf9\xda\x8c\x99\x97\xa6\x6b\xaa\x99\x07\xd3\xb5\x19\x71\x0c\xe4\xcf\x40\xa0\xf4\x88\xd2\x0c\xaa\x99\x18\x68\xa7\x8b\x70\x2a\x0f\x81\xb6\x54\x84\x53\xd3\x10\xd0\x22\x9c\xe9\x21\x2e\x70\x00\x92\x90\x31\x6a\x91\x6a\xbc\xf8\x82\x76\xec\x49\x0a\x8a\x7c\x52\xd1\x8d\x66\xe0\xd7\xe1\xa3\xef\xff\xdc\xdd\xbd\xd5\x8e\x0c\x02\xa8\xc5\x6d\xc2\x1f\xb9\xd5\x97\xfc\x06\xad\x1a\x44\x62\x96\x3d\x0b\xa6\xf6\xda\xa7\xf7\x03\xab\x89\x69\xc5\xb4\x16\x67\x81\x0f\xc1\x7e\xd8\xbf\x60\xa8\xb5\x38\x60\x3d\x98\x52\x5d\x97\x54\x60\x55\x2a\x0e\x66\xfc\x79\x5a\xf4\xfd\x8a\x45\xeb\x9e\x3e\x51\x4f\xb9\xc1\x98\x45\xc2\xf9\x65\x46\x40\x99\x11\xc9\xa6\x46\x1d\xd1\x25\xe0\x34\xca\x75\x83\x9d\x2c\xb3\x3e\x85\xcb\x16\x63\x56\x3d\xd0\x19\x96\x8e\xa1\x26\x2e\x28\x3e\xb3\xa4\x00\x41\x3b\x64\x62\xca\x80\xf7\xbf\xe4\x34\x34\x0d\x3b\x4e\xc4\x56\x37\x1c\xdb\x44\x4b\xb3\x80\x3b\xf9\xfe\x5e\x8f\xf1\x4d\x0f\x0c\xbd\x08\x29\x76\x1a\x26\x7b\xcf\xa9\xc2\x52\xfb\xe9\x3d\xf7\xeb\xdb\x9d\x8b\xd7\xdd\x4f\xee\xf7\xc3\x13\x41\x31\x40\x1b\x1e\xb7\x4d\xcc\x7a\x45\xd5\xf6\xf6\x10\x9c\x3c\xc9\x71\x84\xa5\xb9\xc3\xc7\x3a\x77\xaf\xb8\x9f\x3c\x70\xff\xf0\x51\x41\xa9\xed\xed\x99\xd7\xcf\xf9\xe4\x49\x1e\xf8\x60\x42\x81\x5e\x52\x0e\x88\x54\xa5\x56\xc3\x06\x22\xa6\x02\xb1\x89\xca\xd8\x14\xf1\x75\xea\x52\x1e\xf0\x07\x6f\xae\x37\xcc\x43\xb5\xf7\x90\x32\xbf\xc7\x3b\x9c\xba\x34\x35\x99\x22\x27\x45\x2d\xad\x86\xb5\x05\x10\x3f\x4a\x06\xe1\xb1\xa3\x4f\x76\x0a\x2f\x00\x0a\x06\xb1\x1b\xac\x9f\x9f\xe4\xf5\x43\xc0\x96\x6c\x5c\x84\x14\xe9\x86\x05\x83\x5d\x70\x8e\x38\x87\x51\x1d\x43\x0f\x66\x64\x1a\x3a\x71\x20\x68\x22\xb3\x81\xe3\xa6\x45\x34\xd3\xd0\x16\xc2\x8e\x83\x9c\x25\xd6\xff\xa5\x41\xb2\x39\x08\x96\x97\x8d\x0a\xc0\x1f\x80\x71\x79\xee\xf0\x31\x99\xf3\x02\xe1\xc4\x56\x4b\xf3\x49\x97\x97\x31\xd1\x5b\xad\x01\x4a\x27\x8c\x2d\x28\xed\xbf\x29\xb7\x45\xa4\x4a\x3a\x07\x00\x0e\x78\xc3\xd9\xad\xdb\x4f\xb7\x3e\xbe\xdc\xde\xb8\x91\x4b\x97\x34\x08\xaf\x44\x2c\x79\x9d\x01\xd2\x89\x63\x5b\x7a\x04\x50\xd8\x8c\x00\xf2\x3b\x86\x03\x14\x4c\xdc\x41\x80\x02\x8e\x83\x00\x9a\xf3\x86\xb3\x9b\x17\x9e\x6c\xae\xae\xbd\xc1\x00\x69\xa6\xd5\xd0\x2b\x26\xa2\x38\x02\x49\xec\x8a\x80\x8a\x3b\x87\x83\x25\x30\xd8\x41\xc0\x04\xae\x83\x40\x3b\x18\x91\xbc\xa1\x68\xd5\x1a\x68\x11\x1b\x9e\x25\x22\xb8\x12\x7d\x11\x5e\x42\xef\x70\xc0\x44\x16\x3b\x88\x98\xc8\x76\x10\x64\xee\x95\xab\xed\xf5\x8d\xf6\xc6\x8d\x9d\x43\xcc\xa9\x23\xd3\x0c\xa3\xcf\xc9\x1a\x36\x6d\x98\x50\x94\xe1\xd3\x0c\xf0\xff\xa4\x7a\x83\x61\xdd\x3b\xc1\xf0\x29\x29\xdb\x62\x9a\x8c\xfe\x7c\x01\xbc\xe0\x76\xed\x19\x69\x8e\x38\xf3\x73\x51\xb0\x9c\xd7\x0f\xf9\x06\x1c\xb6\x95\xcf\xcf\xed\xc4\x66\x9e\xe2\x8e\x16\x61\xd4\x32\x05\xef\x0b\xb5\x0b\x1e\x03\xaf\x5b\x5e\xf6\xfc\x67\x7e\xae\xd5\x4a\x7b\xc1\x97\x63\xb8\x63\x58\xa3\xfc\x7c\x19\x18\xcf\x6f\x8e\x68\x40\x9f\xf8\x65\x19\x51\xd4\x54\x68\x26\x8d\xe9\xf7\x6e\xcf\xa0\x7d\x84\x3b\x9b\xde\xce\x1f\x69\xce\xbc\xf4\xb4\xd6\x83\xdb\xb0\x9b\x33\x27\x31\x41\xfe\x95\x4b\x12\x5c\x58\xea\xdc\x5e\x73\xaf\x7f\xe9\x5e\x5f\xeb\xde\x7c\xb8\x73\x98\xfa\xe1\xd8\x0b\x6c\x65\xeb\x34\x4c\x8d\xdb\x3c\xf8\xa7\x9e\xd3\xbc\x23\x8f\x07\x78\x42\x75\xdf\x25\xe6\xed\xe6\xcc\xdb\x41\x4f\x1c\x91\x79\xaf\xec\x77\x03\x7e\xa2\x1e\x1e\x8b\x5f\xc6\x42\xf3\xd4\x6f\xd0\x11\xd6\xd4\xe6\xd5\xef\xdc\x6b\xb7\xe6\x8f\x74\x6e\x7d\xef\xfe\x70\xed\x25\x9e\x36\x76\x6e\xbb\xe5\x10\xbc\x83\xd9\xf1\x25\x3b\xd8\x72\x1b\xd4\x3c\xca\x09\xf8\x40\xb4\x60\x3d\x6b\x78\xb8\x11\x0c\x7c\xd8\x82\x49\x00\x12\xcc\xe6\x09\xc3\xb4\x82\xb4\xfe\xfc\x27\xde\xa0\x1b\xd4\x3c\xc8\x9f\xb2\x19\x6e\xdf\x4c\x6e\xd0\x2b\x8c\xb2\xd1\x26\x74\x2c\x6d\xad\xdc\xd9\x7c\xfa\x71\xe7\xea\x17\xee\xb5\xff\xf2\x11\xd9\xcd\xc4\x67\x17\x4d\x2f\x5a\xb2\x1f\x83\x84\x9d\xa3\x45\xf4\x62\x60\x88\x64\x3b\x86\x4a\xba\xfa\x01\x3c\xdd\xc7\x37\xdc\x2b\x0f\xb6\x01\x8f\x18\xa1\xc4\xc5\x99\xb6\x01\x71\xc1\x27\x38\x4d\x14\x8d\xbc\x19\xde\x0d\x9e\x8e\x1d\x8d\x1a\x65\xac\x97\x97\xe2\xb1\x20\x6b\x8a\xb7\x27\xcf\xaa\x27\x8e\x1e\x4a\xdd\x9c\x78\xce\x85\x4d\xac\x0d\xd8\x04\x23\xa1\xa2\x41\x4e\xfa\x33\x44\x0d\x0f\x8b\x58\xf1\xa4\xcc\xa3\x18\x92\xe2\xf5\x68\xfc\xfa\xe6\x79\x9e\xa2\xba\x55\x47\x06\x71\x86\x47\xd2\x39\x9f\x70\x27\x42\x28\xb7\x00\xa2\x18\x0d\x01\x27\x52\x2d\x06\x64\x2e\xec\xa2\xd6\xa2\x53\x84\xd3\x03\x3d\x26\x98\xeb\x63\x50\x1a\x5b\x5e\x96\x00\x45\xa4\x8a\xc1\xb8\x31\x01\xc6\x9b\x60\xb6\x18\xac\xcb\x80\x63\xab\x35\xb6\xbc\x3c\xde\xf4\xfe\x48\x00\x13\x1d\x48\xad\x56\xaa\xf7\x87\xca\x8f\xe2\x05\x09\x2d\x9e\xed\x09\xed\xf5\x95\xcd\x07\x97\xdb\xeb\x2b\xed\xf5\xbf\xba\xf7\xef\xbb\xd7\xaf\x6c\xdf\x37\x76\x3f\xf3\x52\x5f\x59\xe6\xa5\xfe\x74\x33\x2f\xb5\x3f\xf3\x52\x53\x33\x2f\xf5\xb5\xcc\xbc\xd4\xff\x4f\x99\x97\x3a\x28\xf3\x52\x07\x67\x5e\xea\xf6\x32\x2f\x75\xc7\x32\x2f\xf5\x27\x9d\x79\xa9\x43\x33\x2f\x75\x84\xcc\xeb\xf9\xc1\x48\xcf\xbc\xb6\x89\x4a\xba\xfa\x2f\x37\xf3\x8a\xc2\x8f\x47\x12\xdb\xf9\xc4\xc0\xcc\x4b\x1d\x94\x79\xa9\xdb\xcc\xbc\xd4\x21\x99\x97\xfa\xa2\x99\x97\xfa\x53\xc9\xbc\xd4\xd7\x37\xf3\x52\x53\x32\x2f\x75\xc4\xcc\x4b\x1d\x35\xf3\x52\x77\x33\xf3\x52\xdf\xf0\xcc\xcb\xbd\xf0\x77\x77\xf5\xc3\xad\x0b\x57\xba\x8f\x57\x5f\x4d\x06\x76\xd8\x62\x07\x4c\xd3\x5a\xfc\x35\x22\x07\x82\x0f\xe2\xc3\xdc\xb8\xfb\xe5\xd9\xce\xd7\x7f\x71\x2f\x7c\xd5\x7d\x7c\x63\x73\xf5\xe9\xd6\x1f\x57\x5f\xbb\xe4\x2c\xe5\xad\xfc\x15\x90\x32\x10\x67\x6a\x7d\x83\x23\xe6\x6b\x09\xaf\xed\x63\x32\x8a\xeb\xba\xd7\xd6\x7c\xab\xb6\x1f\x5d\x15\x0d\x3b\x01\xdc\x7f\x7f\xb2\xb5\x72\xc9\xbd\x7e\xd5\xbd\xf6\xd7\xcd\x0f\x1f\xfb\xfb\x8c\xfb\xed\x8a\x7b\xff\x7e\xf7\xf1\x8d\xf9\x23\x21\x00\xaf\x30\x08\x9e\x70\x30\x25\xde\x77\xa4\xa1\x9e\xf3\xe9\x23\xf7\xf1\x1f\xba\x37\x1f\x76\x2e\x7e\xe7\x2d\xcf\x97\x70\x43\x1e\x6b\xc7\xd1\x89\x5b\xf1\x36\x18\xf6\xb5\x5a\x69\xb1\x30\x1c\x0d\xe3\xe0\x33\xc1\x4f\x12\x0f\x0b\x57\x1b\xed\xa7\xf7\x3a\x9f\x7c\xde\x7e\xfc\xe7\xee\x9d\xf3\xed\xa7\x0f\x3a\x67\xd7\xdc\xd5\x4b\xee\x85\x87\x13\xc0\x7d\xb4\xb1\xb9\xba\xba\xf9\xe4\x3f\xdd\x0b\x5f\xbc\x52\x70\x8f\x20\xc7\x59\xb4\xa8\x3e\x2a\xb8\xee\xda\x47\xdd\x3f\x9f\xdd\x65\x64\xfd\x28\x61\x47\xaa\xf9\x48\xc7\xaa\x72\x28\xe2\x56\x8c\x74\xd8\x97\x8e\x74\xc8\x6f\x24\xa4\x93\xc4\xaf\x0d\xd2\xbb\xbc\x5f\xfd\x1a\x97\x6b\x96\xb5\xf0\x6a\xb6\xaa\x40\xf8\x89\xa3\x87\x86\x3b\xe3\x89\xa3\x87\x5e\x4a\x74\x11\x75\xe2\x6e\x21\xb6\x63\xbf\x8b\x7b\xd3\x3d\x2f\x1e\x1f\xc9\xf7\x7a\xc9\x9f\xed\x7d\xe9\x67\x9d\x17\x2e\x42\xdd\xb3\xe8\x4b\x87\xa5\xee\xb9\xef\xdd\x8f\x1f\xb9\xd7\xce\x6d\xae\x7c\xe8\xae\xde\xee\xdc\xfa\x3e\x50\x6c\x73\xed\x6f\x9d\xdb\x57\x0b\x0a\x2a\x15\xca\x54\x49\x57\xa0\x73\x73\xad\x73\xf9\x6c\xf7\xce\x79\xf7\xda\xed\xad\x8f\xaf\xed\x59\x36\xec\xe6\xcc\x01\x5d\xa7\xad\x09\xe0\x37\x8e\x7a\x75\x76\x51\x33\xcc\x32\x83\xb6\x2a\xd2\xaa\x49\xda\x30\xc7\x4d\xcf\x3e\x5f\x61\x30\x0d\xec\x73\x14\x7f\xd0\xc0\x0e\xfb\x25\x5f\x1e\x43\x3d\x59\x20\x7e\x39\x07\x87\x34\x25\x13\xce\x9e\x18\x79\xc6\x29\xa2\x9f\x5c\x3c\x4b\xc8\xfd\xc3\xdb\x3d\x30\x0c\x12\xf8\x02\xeb\x43\xe0\xd1\x5e\xdf\xe8\xfe\xf7\xc6\x3b\x6f\x1f\xdf\x5c\xfb\xae\xf3\xed\xb9\x7f\xfc\x70\xb9\xbd\x7e\xc5\xef\x3c\xf2\xfe\xb1\xa0\xf7\xc7\x95\x73\x3d\x1e\xed\x5e\xbf\xdc\x5e\xff\x64\x57\x3c\x70\x94\x20\xbf\xbb\x65\xb5\x05\xc5\x2f\xe4\x4d\xd1\x27\xa5\x1a\x38\x51\x01\x6c\xc7\x68\x10\x26\x2d\x7a\x35\xe6\x92\xc9\xff\xf7\x51\x29\x53\x8c\x16\xd2\xab\x93\x3d\x9d\xbc\x69\x8e\x71\x06\xcf\x82\xa9\xe9\x28\xe1\x37\xad\xaa\xf7\x7b\x01\x3b\x45\x27\xa1\x20\x9a\x87\x05\xbf\x1c\x3a\xfe\x61\x01\x00\xe3\xd9\x4a\x83\x68\xcc\xb0\x48\x36\xb7\x1c\xcc\x1f\xcf\x42\x59\xb0\x52\x4e\xb6\x48\x36\xe3\x5d\x2c\x65\x26\x22\x6a\x9c\x03\xcb\xd1\x9b\x61\xd9\xa6\xb8\x89\x09\x9b\xc3\x15\xd4\x30\x59\x36\xb7\x3f\x1a\x1b\xcf\x66\xf8\x66\x98\xc9\xc9\x88\x18\x75\xc4\x70\x76\x19\x38\x1a\xb5\x4c\xf3\x38\x7f\xb3\x49\xd0\x9a\x00\xd3\x93\x93\xe2\x0c\x19\x9d\x42\xa7\xb3\xcb\x02\xa6\x75\xcc\x6a\x96\x3e\x0b\x20\x77\x3b\x38\x21\x8c\x34\xa8\x39\x0b\xa0\xe2\xa0\x26\x4e\xf4\xeb\x88\xa1\x59\x2e\x9c\xa3\x95\xc9\xc9\x0e\xa6\x06\x32\x8d\x33\x38\x9b\x13\xc9\x82\x52\xe8\x59\x10\xbe\x18\xc8\xfa\x45\xce\xe2\xeb\x05\xaf\x21\x7b\xd5\xd3\x99\x9c\xac\x39\x4e\x36\x2c\x9a\x86\x13\x00\x96\x4d\x4b\x5b\x80\xc2\x1b\xf0\x7f\x46\x25\x64\x05\xfe\xa9\x58\x04\xd0\x5a\x80\xbd\x3c\x93\x5c\x91\xae\x1f\xe4\xee\x91\xf5\x6b\xb5\x25\x1d\x91\x2a\xa6\xb0\xb7\x44\x72\x3c\x9b\xd9\x13\xd5\x61\x67\x72\x72\x8d\xd5\xcd\x50\xe7\x04\x69\x0b\x60\xd3\xc1\x7d\x22\x15\x05\x58\x0b\x3d\x7d\x0e\x66\xc7\x8d\x3a\xb6\x1a\x2c\xc5\x1d\x46\xb3\x81\xf7\xfb\x88\x1e\x13\x80\x00\xdb\xc9\x1e\xc5\xc6\x44\x02\xa1\x81\x29\xb5\x68\x0c\x45\xf6\xd4\x07\xbf\x79\xf7\x68\xaf\xd1\x3c\x05\xfc\x21\xd9\x61\x88\x35\x9c\xe3\xf8\x34\x4b\x48\x8e\x05\xb4\x42\xc9\xad\x9c\xbf\x82\xc3\xbf\x4d\x44\x41\x19\x57\x2c\x8a\xbd\x02\xac\x22\x84\x7e\x7f\xe4\x06\xfd\x35\xce\x91\x1e\xba\xa5\x35\xea\x98\x30\xb9\x8a\xd9\xdb\x26\xe6\x8f\xbf\x5c\x9a\xd7\xb3\x41\x2d\x57\x4e\xd6\x0d\xef\x17\x18\x7a\x11\x78\x3f\xc1\x08\xa6\x71\x87\x10\x44\xc6\x36\x19\xca\xcf\xcf\xa6\x44\x7d\xc7\x86\xa9\x22\x14\xbd\xe5\x64\x83\x10\x4c\xdf\x3d\xfe\xde\x21\x50\x04\xd0\x3f\x99\xff\x2b\x5e\x02\xf3\x73\x70\x04\x36\x62\xf9\xd7\x40\x56\x41\xe5\xd5\x08\xec\xfc\x6d\xa9\x87\x51\x9c\x92\x65\x4e\x7a\x39\x59\xc6\xcf\xc9\x32\x61\x4e\x46\x51\x5d\xd6\x2c\xe2\x58\x26\x96\x91\x69\x2c\x35\x88\x97\x9f\xd5\x11\x41\x55\xac\xa0\x85\x5f\x38\x76\xbd\xb8\x77\xea\x67\xaa\x3c\x95\xdf\x37\xb5\x6f\xf2\xe7\xd3\x32\x41\x4d\x89\xf2\xd8\x2a\xeb\x68\x41\x9e\xd9\xb7\xef\x67\x53\xaa\x3e\x59\x7f\x17\xbd\x57\xad\x66\x4a\xee\xc5\x3f\xb9\x8f\x36\x40\xf4\x06\x3c\x63\xf3\xd5\x6f\xf5\x38\x42\x7f\x2d\xf5\x1b\xe2\x08\xdb\x86\xff\xb8\xb5\x80\xc9\xee\x61\x1e\xe2\xed\x03\x20\x6b\x44\x41\x9a\x66\x35\x08\x53\x18\x17\x1c\x62\xe8\xae\x7d\xb4\xf5\x1f\x5f\x0c\xc6\x2f\xbd\xc4\x7a\x38\x86\x83\x0d\x17\xbe\xb2\x00\x03\x28\x8e\x08\xde\xf3\x7b\x0e\xa3\xa3\xcf\x0a\xfc\x03\xbe\xde\xc0\xea\xc8\xa9\xc9\x31\x2c\xde\x4a\xb6\xa9\x55\x31\x4c\xac\x20\xdb\x90\x3c\x78\x9d\x10\xdf\xf6\xa3\xcf\xbb\x97\x2e\x4b\xa5\xee\x0f\xb7\x36\x9f\xdc\x70\x2f\x6f\xb8\xf7\xef\x83\xb9\xc3\xc7\xb2\xed\xc7\x4f\xbb\x37\x1f\x76\x1e\x3e\xe8\xdc\x7b\x9a\x1b\x8c\xff\x80\x92\xed\x37\x64\x11\x07\x97\xb5\x5e\x38\xd7\xb7\x09\xbb\x3f\x04\x62\x96\xbb\xbf\xb6\x05\x70\x3c\x37\x30\x50\x5d\xf9\x85\x69\x79\x3f\xd5\x3d\x53\x93\x34\xb2\x47\xa9\x1b\x04\xf3\x95\xef\xc7\xe9\x4c\xa9\x73\xeb\x1b\xf7\x2f\x9f\xf9\x77\xbf\x03\xd6\x3e\xdf\xdc\x75\xbf\xc0\x1f\x14\x41\x66\x79\x39\xae\xca\x6f\xb5\x32\x3e\x8d\xb3\x68\x30\xad\x96\x0d\xc8\xa2\x64\x47\x43\x4e\xfc\xbb\x98\x59\x21\xf5\xe8\xdf\x06\xa2\x21\x2f\x6d\x0f\xf3\x8f\x56\x82\x91\xf0\xeb\x0a\x91\x59\x7a\x4c\x1a\x85\xa1\x58\xfc\x2f\x72\x1c\xe0\xe5\xcf\x66\xa9\xfb\xd9\xba\xc8\xa7\x3f\xed\x79\x16\x8b\x96\x77\xb2\x08\xcf\x13\x63\xc2\xc9\x22\x5a\x7e\x55\xcc\x0e\x59\x55\x27\x5a\x70\xe3\xdc\x89\xb2\x50\xf1\x4e\x2d\x13\x71\xae\x17\x64\xb0\xc2\x19\x64\x8f\x47\x92\x92\xe0\x7a\x49\x1d\x17\x1d\xf1\x1e\xf3\x52\x58\xef\x63\x6b\x13\x99\xd9\xa0\x7f\x02\xec\x05\xff\x0c\xa6\xbc\xfc\x33\x5d\x4b\xee\x28\x46\x5c\x1f\x19\x3a\x8b\x58\xec\xc8\x1d\x26\x22\x54\xfb\x09\xd5\x24\x21\x0f\x0b\x09\x8e\x3c\xf5\x4f\x7c\xb4\x0f\x0d\xd1\xff\x89\xde\xab\xb7\xf2\xf2\xfd\x44\xea\x1e\x15\x56\x08\xe3\x63\xb1\x28\xf5\x45\x45\xa9\x43\x44\xa9\xb1\x28\x45\x01\xfe\x8d\x97\x58\x84\x21\xa2\x1c\x4d\xf4\x6e\x69\x22\xac\xb3\x70\x0f\x7c\xcb\xeb\x7a\x0b\xa6\x7e\x2d\x1f\x74\x8e\x48\x99\xde\xa0\x66\x0a\x79\x70\xf4\xf2\xd7\x34\xb7\x88\x7f\xe5\xe4\xd9\xc2\x37\x17\x10\x5d\x2a\x59\xd7\x18\xf8\x16\x74\x1f\xfc\x8f\xfb\xd1\xa7\xdd\x3b\xe7\x4f\x1c\x3d\xb4\x75\x77\x65\xf3\xe9\x4d\xf7\x4f\x9f\xf9\xdf\xa2\xe6\x8f\x34\x67\xdc\xbb\xdf\xb8\xf7\x56\x7e\x5c\x39\xe7\x7e\x79\xee\x1f\x3f\xdc\x09\x63\x18\xdf\xaa\x38\x3f\xd9\xb0\x65\xa7\xac\x18\xf6\x8f\x2b\x67\xc3\xb1\xfa\x92\x61\xcb\x86\x6d\xd8\x32\xc1\x4c\xe8\xd7\x75\xe2\xc8\x16\x45\x4b\x5e\xb4\xf3\x3e\xae\x19\x76\xf0\xba\x3d\xe7\xb5\x40\x5d\xf5\x79\xd5\x55\x9f\xad\xae\x9a\xa6\x6e\x53\x95\x3d\x8d\x4d\xa4\x9c\x72\x2c\x22\x8c\x38\x36\xc6\xba\x4c\x70\x43\x95\xb1\xde\xe0\x49\x58\x15\xb3\xf9\x23\xb2\x5d\x8b\xd4\xee\x73\x12\xb1\x14\x44\x74\x92\x7e\x37\x7c\x86\xb7\xa4\xc3\x3d\xd0\x3b\x46\x73\xae\xd0\x5b\xb6\xe3\x2c\xfd\xe5\x2e\xf3\x47\xc2\x4f\x19\xee\xdd\x87\xee\xe7\x77\xdc\xd5\xc7\xee\xfa\x97\xdd\x3b\xe7\x37\xbf\x5b\xeb\xde\xfc\xd6\xfd\xf4\x61\x7b\xfd\x6b\x3f\x5b\x79\x5e\xa8\xd3\x85\x6d\x3d\xba\xbd\xb9\xfa\xb9\xcf\xb1\xfb\xd5\x57\xfe\x67\xff\x18\xfa\x6c\x7b\x7d\x65\xf3\xe2\x57\xed\xf5\x8d\xad\x7b\x9f\xb5\xd7\xff\xd6\xf9\xe3\xdf\xbb\x77\xce\xf3\xf1\x5c\x84\x59\x22\x16\x47\x66\x4c\x54\xac\xf4\x07\xe7\x84\xc2\xc3\x6c\x8f\xeb\x36\x5b\x8a\xb6\x0f\xa3\x92\x72\xaf\xc2\xa3\xaa\xdf\xfb\x2b\xc7\x22\xa0\x08\x7e\x75\xec\xfd\xc3\xb2\x8d\xa8\x83\xfb\x6e\x34\x2a\x16\x05\x59\x2f\x0c\x17\x27\xf7\x03\xa3\x10\xcf\x93\x4d\x4c\xaa\xac\xb6\x1f\x18\x6f\xbd\x95\xbc\x2c\x18\x45\x4d\x64\xdb\x98\xe8\xd9\xc4\x15\xc3\xef\x0b\x96\xed\x79\xac\x9f\xaa\x65\xc6\x97\x63\x69\xbf\x35\x7e\xe7\x27\x12\x99\xe4\x75\x65\x2a\x4d\xb6\xb7\xf7\x80\xae\x53\xec\x38\xbf\x9d\xfc\x5d\x2b\xd7\x73\xaf\xe9\x8b\x2c\xfd\x5e\xe8\x16\x2e\x35\xe2\x2b\x0d\x45\x01\x5b\x2b\x97\xda\xeb\x5f\x47\x3d\xdc\x93\x61\xb4\x6f\x89\x18\xb6\x5a\xd0\xbf\x7c\x82\xcf\x6f\x18\xbe\x91\x0e\xe4\x9a\xeb\x53\xac\xef\xb6\xa9\x6f\x39\x27\x3d\xbb\xe0\xd8\x88\x04\x57\x9d\x19\xcd\x32\x2d\x3a\x0b\x28\xd6\x33\xa5\xce\xff\x3e\xe8\xdc\xbd\xd4\xb9\xf4\xc4\xbd\xf8\x8d\x7b\x6d\x8d\xbb\xf8\x9d\xf3\xfe\x0a\x28\x28\x7c\x52\x29\x92\xde\x12\xd3\x81\x78\x87\x2f\x28\x5c\x44\x69\xec\xff\x02\x00\x00\xff\xff\xf1\xfd\xb9\x4b\x99\x46\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 18073, mode: os.FileMode(493), modTime: time.Unix(1614008969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
