// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\x97\x78\x8f\x10\x8a\x2f\xb9\xad\xda\xda\x62\x5b\x33\x2d\x69\xf0\x68\x66\xe8\x6e\xc9\x18\x95\xaa\x1c\x16\x12\x48\x41\x80\x3b\x96\x25\x2c\x84\xe5\x2e\x49\x71\x77\x89\x9d\xbd\xda\xda\x38\x26\x84\x3f\x26\x1a\xc9\xfe\x69\xff\x85\xab\x9e\xaf\x3d\xd2\x08\x09\x6c\xb3\x84\xe5\x07\x6b\xa6\xfb\xf5\xeb\x37\xef\xf3\xfa\xf5\x67\x7a\x1e\x85\x1a\xab\x9b\xc0\x44\x56\xb5\x08\xcf\xd7\x60\x69\x62\xa2\x50\xc3\x48\x2f\x4d\x00\x50\xa8\x63\x86\x80\x56\x43\x84\x62\x56\x84\x0d\x56\x91\x0e\xc0\xb8\xa3\xc6\x98\x23\xe1\xb3\x0d\xa3\x59\x84\xbf\x92\x4e\x1d\x92\x0e\xdb\x75\x07\x31\xa3\x6c\x62\x08\x34\xdb\x62\xd8\x62\x45\xb8\xf8\x56\x11\xeb\x55\x2c\x8c\xb3\x50\x1d\x17\x61\xd3\xc0\xcb\x8e\x4d\x98\x20\xba\x6c\xe8\xac\x56\xd4\x71\xd3\xd0\xb0\xe4\xdd\x4c\x01\xc3\x32\x98\x81\x4c\x89\x6a\xc8\xc4\xc5\x99\x01\x35\xa8\xc1\x6a\x36\x11\x94\x9c\x31\x82\xb9\x98\xc1\x4c\x5c\x5a\x58\x38\x7a\x42\x7a\xfb\xbd\x82\xe2\xdf\xf2\x0e\xd3\xb0\x96\x00\xc1\x66\x11\x52\xb6\x62\x62\x5a\xc3\x98\x41\x50\x23\xb8\x52\x84\x0a\x65\x88\x19\x9a\x52\xb6\x6d\x46\x19\x41\x8e\x5c\x37\x2c\x59\xa3\xd4\xd7\x49\x35\x62\x38\x0c\x50\xa2\xc5\xa2\x67\xce\x36\x30\x59\x91\x66\xe5\xfd\xf2\x8c\x27\x7d\x86\xc2\x52\x41\xf1\x45\xc7\x9e\x50\xb3\xeb\x75\x3b\x9c\xa9\xa0\xf8\x10\x4c\x14\xca\xb6\xbe\xe2\xe9\xe0\x0d\x98\xf0\x4b\x00\x0a\xba\xd1\x04\x9a\x89\x28\x2d\x42\x0b\x35\xcb\x88\x00\xff\x47\xd2\x11\x59\x02\xe5\xaa\xff\x4b\x6b\x48\xb7\x97\x25\x5a\x87\xfe\xb0\xe4\x40\xee\x30\x64\x58\x98\x00\x5d\xaa\x98\xf8\x1c\x38\xd3\xa0\xcc\xa8\xac\x48\x81\x27\xa5\x32\x66\xcb\x18\x5b\xd1\x60\x00\x0a\x08\x30\x44\xaa\x3c\x16\xca\x26\xb2\x96\xc2\x67\xe0\x81\x40\xe7\x15\xa5\x6a\xb0\x5a\xa3\x2c\x6b\x76\x5d\x39\x83\x31\xa5\x2b\x79\x45\xd7\x2d\x2a\x55\x6d\x98\x34\x57\x2a\x13\x64\xe9\xe1\xc4\xc8\x34\xaa\x96\x64\x30\x5c\xa7\x92\x86\x2d\x86\x89\x30\x27\x77\x7a\xb3\x0a\xce\xd5\x4d\x8b\xfa\x33\xcd\x2b\xca\xf2\xf2\xb2\xbc\x3c\x2b\xdb\xa4\xaa\xe4\xa7\xa7\xa7\x15\xda\xac\x42\xe0\x47\x0f\xcc\x4f\x43\x50\xc3\x46\xb5\xc6\xfc\xeb\x8a\x61\x9a\x45\x68\xd9\x16\x86\x80\x32\x62\x2f\xe1\x22\xd4\x1a\x84\x60\x8b\x1d\xb6\x4d\x9b\x40\x61\x2a\x10\x48\x48\xa6\x61\x61\x0d\x39\x45\x48\xec\x86\xa5\x43\xb1\xf9\x8c\x6d\x58\xfd\xed\xe1\xd4\x10\x20\x62\x20\xa9\x66\xe8\x3a\xb6\x8a\x90\x91\x06\x8e\x9e\xbc\x4e\xa4\x7c\x72\x2e\xbe\x02\xde\xb4\xcf\x15\xe1\x34\x98\x06\xf9\x39\x90\x9f\x83\xa0\x62\x6b\x0d\x8a\xca\x26\x2e\xc2\x0a\x32\x29\x4e\x78\x02\x80\x82\x83\x58\x0d\xe8\x45\xf8\x6e\x7e\x16\xcc\xfc\x1c\xe5\x41\x1e\xf0\xd1\x33\x52\x1e\xe4\xdf\x99\x15\xef\xa5\xfc\xfb\x07\xe2\x7b\x90\x97\xf2\xb5\x39\x33\x2f\xcd\xd6\x54\x33\x0f\x66\x6b\x73\x62\x1f\xc8\x9f\x87\x40\xe9\x9b\x4a\x33\x88\x66\x62\xa0\x9d\x2b\xc2\x99\x3c\x04\xda\x4a\x11\xce\xcc\x42\x40\x8a\x70\xae\x4f\xb8\xc0\x01\x48\x42\xc6\x88\x6d\x55\xe3\xc5\x17\xdc\xc7\x91\xa4\xa0\x28\x26\x15\xdd\x68\x06\x71\x1d\x5e\xfa\xf1\xef\x87\xbb\xb7\xde\x91\x61\x01\x62\x73\xaf\xf0\x4b\xee\xf7\x15\xff\x86\x54\x0d\x4b\x62\xb6\x33\x0f\x66\xf6\x3b\xe7\x0e\x02\xbb\x89\x49\xc5\xb4\x97\xe7\x81\x0f\xc2\x41\x38\xb8\x64\x88\xbd\x3c\x64\x45\x98\x52\x5d\x97\x54\x60\x57\x2a\x14\x33\x7e\x3d\x2b\x46\x7f\xc5\x26\xf5\xd2\x84\xf8\x98\xe5\x06\x63\xb6\x15\x8e\x2f\x33\x0b\x94\x99\x25\x39\xc4\xa8\x23\xb2\x02\x68\xa3\x5c\x37\xd8\xe9\x32\x1b\x30\xb8\x6c\x33\x66\xd7\x03\x9b\x61\xe9\x04\x6a\xe2\x82\xe2\x2b\x4b\x4e\x20\x58\x87\x4c\x4c\x18\xf0\xfe\x4a\xb4\xa1\x69\x98\xd2\x48\xad\x6e\x50\xc7\x44\x2b\xf3\x80\x87\xf9\xc1\xfe\x98\xf1\x9d\x0f\x0c\xbd\x08\x09\xa6\x0d\x93\xbd\x4b\xab\xb0\xd4\x79\x7a\xdf\xfd\xfa\x4e\xf7\xf2\x0d\xf7\xe3\x07\x83\x00\x45\x60\x0c\xb1\x86\x67\x6e\x13\xb3\xfe\xa9\x6a\xfb\xfb\x04\x4e\x9f\xe6\x48\xc2\xd2\xc2\xd1\x13\xdd\x7b\xd7\xdc\x8f\x1f\xba\xbf\xff\xb0\xa0\xd4\xf6\xf7\x8d\x1b\xd4\x7c\xfa\x34\x4f\x7d\x30\x61\x40\xbf\x28\x07\x44\xaa\x12\xbb\xe1\x00\x11\x53\x41\xd8\x44\x65\x6c\x8a\xf8\xd2\xba\x94\x07\xfc\xc2\x1b\xeb\x75\xf3\x64\xed\x5d\xa4\x8c\xef\x8b\x0e\x5a\x97\x66\xa6\x53\xe6\x49\x31\x4b\xab\x61\x6d\x09\xc4\x97\x92\x61\xf1\xec\x31\x30\x77\x8a\x2e\x00\x0a\x86\xe5\x34\xd8\xa0\x3e\xc9\x6b\x87\x80\xad\x38\xb8\x08\x09\xd2\x0d\x1b\x06\xfb\xe0\x82\x45\x8f\xa2\x3a\x86\x1e\xcc\xc8\x34\x74\x8b\x42\xd0\x44\x66\x03\xc7\xb7\xb6\xa5\x99\x86\xb6\x14\x36\x1c\xe6\x2a\xb1\xfe\x2f\x0d\x2b\x9b\x83\xa0\xd5\x32\x2a\x00\x9f\x05\x93\xf2\xc2\xd1\x13\x32\xd7\x05\xc2\x81\xed\xb6\xe6\x8b\xb6\x5a\xd8\xd2\xdb\xed\x21\x46\x27\x9c\x2d\x18\xed\x3f\x29\xf7\x45\x64\x4a\xba\x06\x00\x0e\x79\xdd\xd9\xed\x3b\x4f\xb7\x3f\xba\xda\xd9\xbc\x99\x4b\x9f\x69\x18\x5e\x89\x6c\xf2\x2a\x03\xa4\x5b\xd4\xb1\xf5\x08\xa0\xf0\x36\x02\xc8\x6f\x18\x0d\x50\x30\x70\x17\x01\x0a\x34\x0e\x03\x68\xc1\xeb\xce\x6e\x5d\xfa\x61\x6b\x6d\xfd\x35\x06\x48\x33\xed\x86\x5e\x31\x11\xc1\x11\x48\x62\x53\x04\x54\xdc\x38\x1a\x2c\x41\xc1\x2e\x02\x26\x68\x1d\x06\xda\xe1\x48\xe4\x35\x45\xab\xd6\x40\xcb\xd8\xf0\x3c\x11\xc1\x95\x68\x8b\xf0\x12\x5a\x47\x03\x26\xaa\xd8\x45\xc4\x44\xb5\xc3\x20\x73\xaf\x7d\xd2\xd9\xd8\xec\x6c\xde\xdc\x3d\xc4\x68\x1d\x99\x66\x98\x7d\x4e\xd7\xb0\xe9\xc0\x84\xa1\x0c\x9f\x63\x80\xff\x91\xea\x0d\x86\x75\xef\x1d\x86\x0f\x49\xd9\x16\xd3\xe6\x18\xe4\x0b\xe0\x05\xb7\x6b\xcf\x49\x0b\x16\x5d\x5c\x88\x92\xe5\xa2\x7e\xc4\x77\xe0\xa8\xad\x7c\x71\x61\x37\x36\xf3\x94\x70\xb4\x2d\x46\x6c\x53\x88\xbe\xd0\xba\xe0\x32\x88\xba\x56\xcb\x8b\x9f\xc5\x85\x76\x3b\xed\x01\x5f\x8e\xe3\x4e\x60\x8d\xf0\x37\xcc\xc0\x79\xfe\xed\x98\x0e\xf4\x85\x5f\x96\x13\x45\x4b\x85\xdb\xa4\x33\xfd\xd6\x9d\x39\x74\x40\x70\x77\xe9\xed\xe2\xb1\xf7\xe7\x5e\x3a\xad\xf5\xe0\x36\x9c\xe6\xdc\x69\x6c\x21\xff\xd0\x25\x09\x2e\x2c\x75\xef\xac\xbb\x37\xbe\x74\x6f\xac\xf7\x6e\x3d\xda\x3d\x4c\xfd\x74\xec\x25\xb6\xb2\x7d\x0e\xa6\xe6\x6d\x9e\xfc\x53\xdf\xd3\xbc\x57\x1e\x0f\xf0\x84\xe9\x7e\x48\x2c\x3a\xcd\xb9\xb7\x82\x96\x38\x23\xf3\x56\xd9\x6f\x06\xfc\x9d\x7a\x74\x2e\x7e\x19\x0b\xcd\x33\xbf\x41\xc6\x58\x53\x5b\x9f\x7c\xeb\x5e\xbf\xbd\x78\xac\x7b\xfb\x3b\xf7\xfb\xeb\x2f\xf1\x6d\x63\xf7\xb6\x5b\x0e\xc1\xdb\x98\x9d\x5c\x71\x82\x2d\xb7\x41\xcc\xe3\x5c\x80\x77\x44\x0b\xd6\xf3\x86\x87\x9b\x85\x81\x0f\x5b\x30\x08\x40\x0b\xb3\x45\x8b\x61\x52\x41\xda\x20\xff\x89\x37\xe8\x06\x31\x0f\xf3\xab\x6c\x86\xfb\x37\x93\x1b\xf6\x08\xe3\x6c\xb4\x09\x1b\x4b\xdb\xab\x77\xb7\x9e\x7e\xd4\xfd\xe4\x0b\xf7\xfa\x7f\xf9\x88\xec\x25\xf1\xd9\x43\xd7\x8b\x9e\x1c\xc4\x20\xe1\xe7\x68\x11\xbd\x18\x18\xa2\xd8\xae\xa1\x92\x6e\x7e\x00\x4f\xef\xc9\x4d\xf7\xda\xc3\x1d\xc0\x23\x66\x28\x71\x71\xa6\x6d\x40\x7c\xe2\x53\x5c\x26\xca\x46\xde\x08\xef\x0c\x4f\xc7\x54\x23\x46\x19\xeb\xe5\x95\xb8\x2f\x60\x4d\xf1\xf6\xe4\x79\xf5\xd4\xf1\x23\xa9\x9b\x13\xe7\x5c\xd8\xc4\xda\x90\x4d\x30\x9a\x54\x74\xc8\x69\x7f\x84\x68\xe1\x51\x11\x2b\x4e\xca\x3c\x89\x11\x14\xaf\xcf\xe2\x57\x97\xe7\x79\x86\xea\x76\x1d\x19\x16\x1d\x9d\x49\x17\x7c\xc1\xdd\x48\xa1\xdc\x03\x88\x60\x34\x02\x9c\xc8\xb4\x18\x90\x85\xb0\x89\xd8\xcb\xb4\x08\x67\x87\x46\x4c\x30\xd6\xc7\xa0\x34\xd1\x6a\x49\x80\x20\xab\x8a\xc1\xa4\x31\x05\x26\x9b\x60\xbe\x18\xac\xcb\x40\x63\xbb\x3d\xd1\x6a\x4d\x36\xbd\x1f\x09\x60\x4b\x07\x52\xbb\x9d\x1a\xfd\xa1\xf1\xe3\x44\x41\xc2\x8a\x67\x47\x42\x67\x63\x75\xeb\xe1\xd5\xce\xc6\x6a\x67\xe3\x7f\xdc\x07\x0f\xdc\x1b\xd7\x76\x1e\x1b\x7b\xcf\xbc\xd4\xe7\x63\x5e\x49\x93\x77\x31\x8e\xd5\x9f\x2e\x0f\x53\x07\x79\x98\x9a\xca\xc3\xd4\x57\x92\x87\xa9\xff\x48\x3c\x4c\x1d\xc6\xc3\xd4\xe1\x3c\x4c\xdd\x19\x0f\x53\x77\x8d\x87\xa9\x3f\x69\x1e\xa6\x8e\xe4\x61\xea\x18\x3c\xec\xf9\xc1\x48\xe7\x61\x3b\x44\x25\xdd\xfc\x97\xcb\xc3\xa2\xf4\xe3\x89\xc4\x7e\x3e\x35\x94\x87\xa9\xc3\x78\x98\xba\x43\x1e\xa6\x8e\xe0\x61\xea\x8b\xf2\x30\xf5\xa7\xc2\xc3\xd4\x57\x97\x87\xa9\x29\x3c\x4c\x1d\x93\x87\xa9\xe3\xf2\x30\x75\x2f\x79\x98\xfa\x9a\xf3\x30\xf7\xd2\x5f\xdd\xb5\xdf\x6d\x5f\xba\xd6\x7b\xb2\xf6\x2a\xf0\xb1\x53\x14\x13\xcb\xfb\x40\x30\x2a\x96\x7b\x9f\x3e\x76\x9f\xfc\xbe\x77\xeb\x51\xf7\xf2\xb7\x9e\xa7\x5f\xc2\xd1\x67\x6c\x1d\x0f\x8f\xf8\x2e\xce\x68\x61\x5b\xbb\x9d\x16\xd6\x61\x6f\x18\xd2\x29\x36\xc4\xd1\x97\x14\x1e\x15\x79\x9b\x9d\xa7\xf7\xbb\x1f\x7f\xde\x79\xf2\xa7\xde\xdd\x8b\x9d\xa7\x0f\xbb\x1f\xac\xbb\x6b\x57\xdc\x4b\x8f\xa6\x80\xfb\x78\x73\x6b\x6d\x6d\xeb\x87\xff\x70\x2f\x7d\xf1\x77\x4d\x56\xc7\x10\xa5\xcb\x36\xd1\xc7\x05\xd7\x5d\xff\xb0\xf7\xa7\x0f\xf6\x18\x59\x7f\xaf\x73\x22\xd3\x7c\xa4\x63\x53\x39\x14\xf1\x5d\x8c\x74\xd8\x96\x8e\x74\xa8\x6f\x2c\xa4\x93\xc2\xaf\x0c\xd2\x7b\x9c\x7a\xfe\x0d\x97\x6b\xb6\xbd\xf4\x2a\x64\x9d\xc0\x94\x53\xc7\x8f\x8c\x0e\xcd\x53\xc7\x8f\xbc\x94\x5c\x23\xda\xc4\x83\x44\xbc\x8f\xa3\x30\x6e\x4d\x8f\xc3\xb8\x7f\xac\x48\xec\x17\x7f\x76\x2c\xa6\x93\xd8\x17\xae\x36\xdc\xb7\xec\xcf\x0e\x4b\xbd\x0b\xdf\xb9\x1f\x3d\x76\xaf\x5f\xd8\x5a\xfd\x9d\xbb\x76\xa7\x7b\xfb\xbb\xc0\xb0\xad\xf5\xbf\x74\xef\x7c\x52\x50\x50\xa9\x50\x26\x4a\xba\x01\xdd\x5b\xeb\xdd\xab\x1f\xf4\xee\x5e\x74\xaf\xdf\xd9\xfe\xe8\xfa\xbe\x96\xe1\x34\xe7\x0e\xe9\x3a\x69\x4f\x01\xff\xe6\xb8\x57\x4e\x15\xdd\x86\xf4\x21\xb8\x57\x45\x59\x35\x29\x1b\x92\x97\x74\x5a\xf1\x77\x4c\xad\x81\x7f\x8e\xe3\xb3\x0d\x4c\xd9\x9b\x7c\xb1\x8c\x8c\x64\x41\xf8\xe5\x30\xc2\x34\x23\x13\xc1\x9e\xe8\x79\x06\x3d\x1c\x14\x17\x49\xa2\x3c\xd8\xbd\x53\x26\x38\x6c\xc2\x17\x58\x1f\x82\x8e\xce\xc6\x66\xef\xbf\x37\xdf\x7e\xeb\xe4\xd6\xfa\xb7\xdd\x3f\x5f\xf8\xdb\xf7\x57\x3b\x1b\xd7\xfc\xc6\x63\xef\x9d\x08\x5a\x7f\x5c\xbd\xd0\x17\xd1\xee\x8d\xab\x9d\x8d\x8f\xf7\x24\x02\xc7\x49\xf9\x7b\x5b\x3d\x59\x50\xfc\x7a\xcd\x14\x7b\x52\x8a\x3e\x13\x85\x9e\x4e\x8c\x86\xc5\xa4\x65\xaf\x98\x58\x32\xf9\x5f\x1f\x95\x32\xc1\x68\x29\xbd\x08\xd5\xb3\xc9\x1b\x46\x8d\xf3\x78\x1e\xcc\xcc\x46\xc7\x6c\xa6\x5d\xf5\x0a\xc3\x9d\x14\x9b\x84\xca\x57\x9e\x16\xbc\xc7\x28\xc4\x15\xe4\x00\x4c\x66\x2b\x0d\x4b\x63\x86\x6d\x65\x73\xad\x60\xfc\x64\x16\xca\x82\x97\x72\xb2\x6d\x65\x33\xde\x89\x41\x66\x2a\x92\xc6\x39\xd0\x8a\x9e\x0c\xcb\x0e\xc1\x4d\x6c\xb1\x05\x5c\x41\x0d\x93\x65\x73\x07\xa3\xbe\xc9\x6c\x86\x6f\x8d\x99\x9c\x8c\x2c\xa3\x8e\x18\xce\xb6\x00\xd5\x88\x6d\x9a\x27\xf9\x93\x4d\x83\xf6\x14\x98\x9d\x9e\x16\x47\xc8\xe8\x0c\x3a\x97\x6d\x09\x98\xd6\x31\xab\xd9\xfa\x3c\x80\x3c\xec\xe0\x94\xd0\xd3\x20\xe6\x3c\x80\x0a\x45\x4d\x9c\x68\xd7\x11\x43\xf3\x7c\x72\x8e\x56\x26\x27\x53\x4c\x0c\x64\x1a\xe7\x71\x36\x27\x8a\x05\x15\xaf\xf3\x20\x7c\x30\x90\xf5\x6b\x59\xc5\xc7\x0b\x1e\x43\xf6\x8a\x64\x33\x39\x59\xa3\x34\x1b\xd6\xc6\xc2\x29\x00\xcb\xa6\xad\x2d\x41\xe1\x09\xf8\x3f\xa3\x12\xaa\x02\xff\x54\x2c\x02\x68\x2f\xc1\x7e\x9d\x49\xad\x48\xd7\x0f\xf3\xf0\xc8\xfa\x25\xb9\x92\xce\x5f\x25\x09\xec\xaf\x84\x9b\xcc\x66\xf6\x45\xe5\xb6\x99\x9c\x5c\x63\x75\x33\xb4\x39\x21\xda\x06\xd8\xa4\x78\x60\x4a\x45\x01\xf6\x52\x5f\x1b\xc5\xec\xa4\x51\xc7\x76\x83\xa5\x84\xc3\x78\x3e\xf0\x0a\xe1\xfb\x5c\x00\x02\x6c\xa7\xfb\x0c\x9b\x10\x05\x84\x1b\x4c\x88\x4d\x62\x28\xb2\x67\xce\xfe\xea\x9d\xe3\xfd\x4e\xf3\x0c\xf0\xbb\x64\xca\x10\x6b\xd0\x93\xf8\x1c\x4b\xcc\x1c\x4f\xd0\x0e\x67\x6e\xe7\xfc\x15\x1c\xfe\x36\x11\x01\x65\x5c\xb1\x09\xf6\xea\x6c\x8a\x10\xfa\xed\x51\x18\x0c\x96\xb2\x46\x76\xe8\xb6\xd6\xa8\x63\x8b\xc9\x55\xcc\xde\x32\x31\xbf\x7c\x73\x65\x51\xcf\x06\x25\x3b\x39\x59\x37\xbc\x52\x7b\xbd\x08\xbc\x5a\xfb\x60\x18\x0f\x08\x61\xca\xd8\x27\x23\xf5\xf9\x6c\x4a\xb4\x77\x62\x94\x29\x42\x6d\x53\x4e\x36\x2c\x0b\x93\x77\x4e\xbe\x7b\x04\x14\x01\x3c\xe4\x05\xfc\xbf\xe2\x15\xb0\xb8\x00\xc7\x50\x23\x56\xf9\x0c\x55\x15\x14\xd8\x8c\xa1\xce\xdf\x96\xfa\x14\xc5\x94\x2c\x73\xda\xe3\x64\x19\x9f\x93\x65\x42\x4e\x46\x50\x5d\xd6\x6c\x8b\xda\x26\x96\x91\x69\xac\x34\x2c\x8f\x9f\xd5\x91\x85\xaa\x58\x41\x4b\xbf\xa0\x4e\xbd\xb8\x7f\xe6\x67\xaa\x3c\x93\x3f\x30\x73\x60\xfa\xe7\xb3\xb2\x85\x9a\x12\xe1\xb9\x55\xd6\xd1\x92\x3c\x77\xe0\xc0\xcf\x66\x54\x7d\xba\xfe\x0e\x7a\xb7\x5a\xcd\x94\xdc\xcb\x7f\x74\x1f\x6f\x82\xe8\x09\x38\x63\xf3\xcd\x6f\xf7\x05\xc2\x60\xc9\xec\x6b\x12\x08\x3b\x86\xff\xa4\xbd\x84\xad\xbd\xc3\x3c\xc4\xdb\x07\x40\xd6\x2c\x05\x69\x9a\xdd\xb0\x98\xc2\xf8\xc4\x21\x86\xee\xfa\x87\xdb\xff\xfe\xc5\x70\xfc\xd2\x2b\x69\x47\x63\x38\xdc\x71\xe1\x23\x0b\x30\x80\xe2\x98\xe0\x3d\x7f\xe4\x30\x32\xfe\xa8\x20\x3e\xe0\xab\x0d\xac\x8e\x68\x4d\x8e\x61\xf1\x56\xb2\x43\xec\x8a\x61\x62\x05\x39\x86\xe4\xc1\x4b\x43\x7c\x3b\x8f\x3f\xef\x5d\xb9\x2a\x95\x7a\xdf\xdf\xde\xfa\xe1\xa6\x7b\x75\xd3\x7d\xf0\x00\x2c\x1c\x3d\x91\xed\x3c\x79\xda\xbb\xf5\xa8\xfb\xe8\x61\xf7\xfe\xd3\xdc\x70\xfc\x87\x54\xe6\xbe\x26\x8b\xd8\x4f\x60\xc0\x4b\xe7\xfa\x0e\x61\xf7\xbb\x40\xac\x72\xef\xd7\xb6\x00\x8e\x17\x06\x06\xaa\x2b\xbf\x30\x6d\xef\xff\x64\x9e\xaf\x49\x9a\xb5\x4f\xa9\x1b\x16\xe6\x2b\xdf\xcf\xd3\x99\x52\xf7\xf6\x37\xee\x7f\x7e\xb6\xb5\xf6\x74\xfb\x0f\x6b\x43\xd6\x3e\xdf\xdc\x75\xbf\x8e\x1b\x14\x41\xa6\xd5\x8a\x8b\xaf\xdb\xed\x8c\x2f\x43\x97\x0d\xa6\xd5\xb2\x81\x58\x44\x76\x34\x44\xe3\xff\xfe\x30\x2f\x50\x8f\xc1\x6d\x20\xea\xf2\x68\x7b\xc8\x3f\xda\x09\x45\x42\x11\xbd\xa8\x2c\x3d\x27\x8d\xa3\x50\xac\xf1\x16\x35\x0e\x89\xf2\x67\xab\xd4\x7d\xb6\x2e\xea\x19\xa4\x3d\xcf\x52\xd1\xf6\xde\x2c\xc2\xf7\x89\x09\xe1\xcd\x22\x5a\x7e\x55\xcc\x8e\xd8\x55\x1a\x2d\xb8\x49\x1e\x44\x59\xa8\x78\x6f\x2d\x53\x31\xd7\x0b\x18\xac\xf0\x0e\xb2\xcf\x13\x49\x21\xb8\x1e\xa9\xe3\x53\x47\xba\x27\x3c\x0a\xeb\x7d\x45\x6b\x22\x33\x1b\xb4\x4f\x81\xfd\xe0\x9f\xc1\x8c\xc7\x3f\xd3\xad\xe4\x81\x62\xc4\x65\x70\x61\xb0\x88\x35\x6d\x3c\x60\x22\x41\x75\x50\x50\x4d\x0a\xf2\xb4\x90\xd0\xc8\xa9\x7f\xe2\x6b\x6c\xe8\x88\xc1\x6f\xaf\x5e\x59\x8d\xc7\xf7\x13\xd4\x3d\xfa\x62\x2e\xf4\x4f\xc4\x53\xa9\x2f\x3a\x95\x3a\x62\x2a\x35\x9e\x4a\x51\x80\x7f\xe2\x25\x7e\x5d\x17\x51\x8e\x06\x7a\xa7\x34\x11\xd6\x59\xb8\x0f\xbe\xe1\x35\xbd\x01\x53\x3f\x83\x0e\x7b\x8f\x48\x19\xde\x20\x66\x8a\x78\xf0\xea\xe5\xaf\x69\xee\x11\xff\xc8\xc9\xf3\x85\xef\x2e\x20\x86\x54\xb2\x7c\x2d\x88\x2d\xe8\x3e\xfc\x5f\xf7\xc3\x4f\x7b\x77\x2f\x9e\x3a\x7e\x64\xfb\xde\xea\xd6\xd3\x5b\xee\x1f\x3f\x73\x2f\x7d\xd5\x7b\x72\x73\xf1\xd8\xfb\x73\xee\xbd\x6f\xdc\xfb\xab\x3f\xae\x5e\x70\xbf\xbc\xf0\xb7\xef\xef\x86\x39\x8c\x6f\x55\x5c\x9f\x6c\x38\x32\x2d\x2b\x86\xf3\xe3\xea\x07\x61\x5f\x7d\xc5\x70\x64\xc3\x31\x1c\xd9\xc2\x4c\x68\xd7\x75\x8b\xca\x36\x41\x2b\x5e\xb6\xf3\xbe\x9d\x1b\x4e\xf0\xb8\x7d\xef\x6b\x81\xb9\xea\xf3\x9a\xab\x3e\xdb\x5c\x35\xcd\xdc\xa6\x2a\x7b\x16\x9b\x48\x39\x43\x6d\x4b\xe8\xa1\x0e\xc6\xba\x6c\xe1\x86\x2a\x63\xbd\xc1\x49\x58\x15\xb3\xc5\x63\xb2\x53\x8b\xcc\x1e\x08\x12\xf1\x1b\xbf\x18\x24\x83\x61\xf8\x8c\x68\x49\x87\x7b\x68\x74\x8c\x17\x5c\x61\xb4\xec\x24\x58\x06\xeb\x18\x16\x8f\x85\x1f\x36\xdc\x7b\x8f\xdc\xcf\xef\xba\x6b\x4f\xdc\x8d\x2f\x7b\x77\x2f\x6e\x7d\xbb\xde\xbb\xf5\x67\xf7\xd3\x47\x9d\x8d\xaf\x7d\xb6\xf2\xbc\x50\xa7\x4f\xb6\xfd\xf8\xce\xd6\xda\xe7\xbe\xc6\xde\x57\x5f\xf9\xdf\x73\x63\xe8\xb3\x9d\x8d\xd5\xad\xcb\x5f\x75\x36\x36\xb7\xef\x7f\xd6\xd9\xf8\x4b\xf7\x0f\x7f\xed\xdd\xbd\xc8\xfb\x73\x11\x66\x89\x5c\x1c\xb9\x31\x51\x8a\x30\x98\x9c\x13\x06\x8f\xf2\x3d\xae\x3b\x6c\x25\xda\x3e\x8c\x4a\xca\xb9\x0a\xcf\xaa\x7e\xeb\x2f\xa9\x6d\x81\x22\xf8\xe5\x89\xf7\x8e\xca\x0e\x22\x14\x0f\x9c\x68\x54\x6c\x02\xb2\x5e\x1a\x2e\x4e\x1f\x04\x46\x21\x1e\x27\x9b\xd8\xaa\xb2\xda\x41\x60\xbc\xf1\x46\xf2\xb0\x60\x1c\x33\x91\xe3\x60\x4b\xcf\x26\x8e\x18\x7e\x5b\xb0\x1d\x2f\x62\x7d\xaa\x96\x99\x6c\xc5\xb3\xfd\xda\xf8\x8d\x4f\x24\x32\xc9\xe3\xca\x54\x99\x6c\x7f\xeb\x21\x5d\x27\x98\xd2\x5f\x4f\xff\xa6\x9d\xeb\x3b\xd7\xf4\xa7\x2c\xfd\x56\x68\x16\x0e\x35\xe2\x23\x0d\x45\x01\xdb\xab\x57\x3a\x1b\x5f\x47\x2d\x3c\x92\x61\xb4\x6f\x89\x18\xb6\xdb\xd0\x3f\x7c\x82\xcf\xef\x18\xbe\x91\x0e\xd5\x9a\x1b\x30\x6c\xe0\xb4\x69\x60\x39\x27\x23\xbb\x40\x1d\x64\x05\x47\x9d\x19\xcd\x36\x6d\x32\x0f\x08\xd6\x33\xa5\xee\xff\x3d\xec\xde\xbb\xd2\xbd\xf2\x83\x7b\xf9\x1b\xf7\xfa\x3a\x0f\xf1\xbb\x17\xfd\x15\x50\x50\xf8\xa0\x52\x34\x7b\x5b\xa4\x03\xf1\x0e\x5f\x50\xf8\x14\xa5\xff\x0f\x00\x00\xff\xff\xcf\x6f\x93\x99\x81\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17537, mode: os.FileMode(493), modTime: time.Unix(1608908381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
