// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\x97\x78\x8f\x10\x8a\x2f\xb7\x5b\xb5\xb5\xc5\xb6\x66\x5a\xd2\xe0\x51\xcf\xa4\xa7\x25\x63\x5c\xaa\x32\x2c\x24\x90\xe2\xeb\x1d\xcb\x12\x16\xc2\x92\x4b\x52\xdc\x1d\xb1\xb3\x57\x7b\x1b\xc7\x84\xf0\xc7\x44\x23\xd9\x3f\xed\xbf\x70\xd5\xf3\xb5\x47\x1a\x21\x81\x6d\x20\x2c\x3f\xe0\xe9\xee\xd7\xef\xbd\x79\x9f\xd7\xaf\x5f\xf7\x3c\x15\x6a\xac\x6e\x02\x13\x91\x6a\x11\x9e\xa9\xc1\xd2\xd8\x58\xa1\x86\x91\x5e\x1a\x03\xa0\x50\xc7\x0c\x01\xad\x86\xa8\x83\x59\x11\x36\x58\x45\xda\x07\xe3\x81\x1a\x63\xb6\x84\x3f\x6c\x18\xcd\x22\xfc\xb5\x74\xe2\x80\x74\xd0\xaa\xdb\x88\x19\x65\x13\x43\xa0\x59\x84\x61\xc2\x8a\x70\xfe\x9d\x22\xd6\xab\x58\x98\x47\x50\x1d\x17\x61\xd3\xc0\x8b\xb6\x45\x99\x40\xba\x68\xe8\xac\x56\xd4\x71\xd3\xd0\xb0\xe4\x35\x26\x80\x41\x0c\x66\x20\x53\x72\x34\x64\xe2\xe2\x54\x1f\x1b\xd4\x60\x35\x8b\x0a\x4c\x4e\x19\x81\x2c\x66\x30\x13\x97\xe6\xe6\x0e\x1f\x93\xde\xfd\xa0\xa0\xf8\x4d\x3e\x60\x1a\x64\x01\x50\x6c\x16\xa1\xc3\x96\x4c\xec\xd4\x30\x66\x10\xd4\x28\xae\x14\xa1\xe2\x30\xc4\x0c\x4d\x29\x5b\x16\x73\x18\x45\xb6\x5c\x37\x88\xac\x39\x8e\xcf\xd3\xd1\xa8\x61\x33\xe0\x50\x2d\x26\x3d\xf5\x61\x03\xd3\x25\x69\x5a\xde\x2b\x4f\x79\xd4\xa7\x1c\x58\x2a\x28\x3e\xe9\xc8\x02\x35\xab\x5e\xb7\x42\x49\x05\xc5\x87\x60\xac\x50\xb6\xf4\x25\x8f\x07\xef\xc0\x94\x3f\x02\x50\xd0\x8d\x26\xd0\x4c\xe4\x38\x45\x48\x50\xb3\x8c\x28\xf0\xff\x48\x3a\xa2\x0b\xa0\x5c\xf5\xff\x3a\x35\xa4\x5b\x8b\x92\x53\x87\xfe\xb4\xe4\x44\x6e\x30\x64\x10\x4c\x81\x2e\x55\x4c\x7c\x1a\x9c\x6a\x38\xcc\xa8\x2c\x49\x81\x25\xa5\x32\x66\x8b\x18\x93\x68\x32\x00\x05\x04\x18\xa2\x55\xee\x0b\x65\x13\x91\x85\xf0\x1d\xb8\x23\x38\xb3\x8a\x52\x35\x58\xad\x51\x96\x35\xab\xae\x9c\xc2\xd8\x71\x96\xf2\x8a\xae\x13\x47\xaa\x5a\x30\xa9\xae\x54\xa6\x88\xe8\xa1\x60\x64\x1a\x55\x22\x19\x0c\xd7\x1d\x49\xc3\x84\x61\x2a\xc8\xe4\x46\x6f\x56\xc1\xe9\xba\x49\x1c\x5f\xd2\xac\xa2\x2c\x2e\x2e\xca\x8b\xd3\xb2\x45\xab\x4a\x7e\x72\x72\x52\x71\x9a\x55\x08\x7c\xef\x81\xf9\x49\x08\x6a\xd8\xa8\xd6\x98\xff\x5c\x31\x4c\xb3\x08\x89\x45\x30\x04\x0e\xa3\xd6\x02\x2e\x42\xad\x41\x29\x26\xec\xa0\x65\x5a\x14\x0a\xa2\x40\x40\x21\x99\x06\xc1\x1a\xb2\x8b\x90\x5a\x0d\xa2\x43\xb1\xfb\x94\x65\x90\xde\xfe\x50\x34\x04\x88\x1a\x48\xaa\x19\xba\x8e\x49\x11\x32\xda\xc0\xd1\x9b\xd7\xa9\x94\x4f\xca\xe2\x2b\xe0\x6d\xeb\x74\x11\x4e\x82\x49\x90\x9f\x01\xf9\x19\x08\x2a\x96\xd6\x70\x50\xd9\xc4\x45\x58\x41\xa6\x83\x13\x96\x00\xa0\x60\x23\x56\x03\x7a\x11\xbe\x9f\x9f\x06\x53\x3f\x47\x79\x90\x07\x7c\xf6\x94\x94\x07\xf9\xf7\xa6\xc5\xb6\x94\xff\xb7\x7d\x71\x1b\xe4\xa5\x7c\x6d\xc6\xcc\x4b\xd3\x35\xd5\xcc\x83\xe9\xda\x8c\x38\x06\xf2\x67\x20\x50\x7a\x44\x69\x06\xd5\x4c\x0c\xb4\xd3\x45\x38\x95\x87\x40\x5b\x2a\xc2\xa9\x69\x08\x68\x11\xce\xf4\x10\x17\x38\x00\x49\xc8\x18\xb5\x48\x35\x5e\x7c\x41\x3b\xf6\x24\x05\x45\x3e\xa9\xe8\x46\x33\xf0\xeb\xf0\xd1\xf7\x7f\xee\xee\xde\x6a\x47\x06\x01\xd4\xe2\x36\xe1\x8f\xdc\xea\x4b\x7e\x83\x56\x0d\x22\x31\xcb\x9e\x05\x53\x7b\xed\xd3\xfb\x81\xd5\xc4\xb4\x62\x5a\x8b\xb3\xc0\x87\x60\x3f\xec\x5f\x30\xd4\x5a\x1c\xb0\x1e\x4c\xa9\xae\x4b\x2a\xb0\x2a\x15\x07\x33\xfe\x3c\x2d\xfa\x7e\xc5\xa2\x75\x4f\x9f\xa8\xa7\xdc\x60\xcc\x22\xe1\xfc\x32\x23\xa0\xcc\x88\x64\x53\xa3\x8e\xe8\x12\x70\x1a\xe5\xba\xc1\x4e\x96\x59\x9f\xc2\x65\x8b\x31\xab\x1e\xe8\x0c\x4b\xc7\x50\x13\x17\x14\x9f\x59\x52\x80\xa0\x1d\x32\x31\x65\xc0\xfb\x5f\x72\x1a\x9a\x86\x1d\x27\x62\xab\x1b\x8e\x6d\xa2\xa5\x59\xc0\x9d\x7c\x7f\xaf\xc7\xf8\xa6\x07\x86\x5e\x84\x14\x3b\x0d\x93\xbd\xef\x54\x61\xa9\xfd\xf4\x9e\xfb\xf5\xed\xce\xc5\xeb\xee\x27\xf7\xfb\xe1\x89\xa0\x18\xa0\x0d\x8f\xdb\x26\x66\xbd\xa2\x6a\x7b\x7b\x08\x4e\x9e\xe4\x38\xc2\xd2\xdc\xe1\x63\x9d\xbb\x57\xdc\x4f\x1e\xb8\x7f\xf8\xa8\xa0\xd4\xf6\xf6\xcc\xeb\xe7\x7c\xf2\x24\x0f\x7c\x30\xa1\x40\x2f\x29\x07\x44\xaa\x52\xab\x61\x03\x11\x53\x81\xd8\x44\x65\x6c\x8a\xf8\x3a\x75\x29\x0f\xf8\x83\x37\xd7\x1b\xe6\xa1\xda\x7b\x48\x99\xdf\xe3\x1d\x4e\x5d\x9a\x9a\x4c\x91\x93\xa2\x96\x56\xc3\xda\x02\x88\x1f\x25\x83\xf0\xd8\xd1\x27\x3b\x85\x17\x00\x05\x83\xd8\x0d\xd6\xcf\x4f\xf2\xfa\x21\x60\x4b\x36\x2e\x42\x8a\x74\xc3\x82\xc1\x2e\x38\x47\x9c\xc3\xa8\x8e\xa1\x07\x33\x32\x0d\x9d\x38\x10\x34\x91\xd9\xc0\x71\xd3\x22\x9a\x69\x68\x0b\x61\xc7\x41\xce\x12\xeb\xff\xd2\x20\xd9\x1c\x04\xcb\xcb\x46\x05\xe0\x0f\xc1\xb8\x3c\x77\xf8\x98\xcc\x79\x81\x70\x62\xab\xa5\xf9\xa4\xcb\xcb\x98\xe8\xad\xd6\x00\xa5\x13\xc6\x16\x94\xf6\xdf\x94\xdb\x22\x52\x25\x9d\x03\x00\x07\xbc\xe1\xec\xd6\xed\xa7\x5b\x1f\x5f\x6e\x6f\xdc\xc8\xa5\x4b\x1a\x84\x57\x22\x96\xbc\xce\x00\xe9\xc4\xb1\x2d\x3d\x02\x28\x6c\x46\x00\xf9\x1d\xc3\x01\x0a\x26\xee\x20\x40\x01\xc7\x41\x00\xcd\x79\xc3\xd9\xcd\x0b\x3f\x6c\xae\xae\xbd\xc1\x00\x69\xa6\xd5\xd0\x2b\x26\xa2\x38\x02\x49\xec\x8a\x80\x8a\x3b\x87\x83\x25\x30\xd8\x41\xc0\x04\xae\x83\x40\x3b\x18\x91\xbc\xa1\x68\xd5\x1a\x68\x11\x1b\x9e\x25\x22\xb8\x12\x7d\x11\x5e\x42\xef\x70\xc0\x44\x16\x3b\x88\x98\xc8\x76\x10\x64\xee\x95\xab\xed\xf5\x8d\xf6\xc6\x8d\x9d\x43\xcc\xa9\x23\xd3\x0c\xa3\xcf\xc9\x1a\x36\x6d\x98\x50\x94\xe1\xd3\x0c\xf0\xff\xa4\x7a\x83\x61\xdd\x3b\xc1\xf0\x29\x29\xdb\x62\x9a\x8c\xfe\x7c\x01\xbc\xe0\x76\xed\x19\x69\x8e\x38\xf3\x73\x51\xb0\x9c\xd7\x0f\xf9\x06\x1c\xb6\x95\xcf\xcf\xed\xc4\x66\x9e\xe2\x8e\x16\x61\xd4\x32\x05\xef\x0b\xb5\x0b\x1e\x03\xaf\x5b\x5e\xf6\xfc\x67\x7e\xae\xd5\x4a\x7b\xc1\x97\x63\xb8\x63\x58\xa3\xfc\x7c\x19\x18\xcf\x6f\x8e\x68\x40\x9f\xf8\x65\x19\x51\xd4\x54\x68\x26\x8d\xe9\xf7\x6e\xcf\xa0\x7d\x84\x3b\x9b\xde\xce\x1f\x69\xce\xbc\xf4\xb4\xd6\x83\xdb\xb0\x9b\x33\x27\x31\x41\xfe\x95\x4b\x12\x5c\x58\xea\xdc\x5e\x73\xaf\x7f\xe5\x5e\x5f\xeb\xde\x7c\xb8\x73\x98\xfa\xe1\xd8\x0b\x6c\x65\xeb\x34\x4c\x8d\xdb\x3c\xf8\xa7\x9e\xd3\xbc\x23\x8f\x07\x78\x42\x75\xdf\x25\xe6\xed\xe6\xcc\x3b\x41\x4f\x1c\x91\x79\xaf\xec\x77\x03\x7e\xa2\x1e\x1e\x8b\x5f\xc6\x42\xf3\xd4\x6f\xd0\x11\xd6\xd4\xe6\xd5\x6f\xdd\x6b\xb7\xe6\x8f\x74\x6e\x7d\xe7\x7e\x7f\xed\x25\x9e\x36\x76\x6e\xbb\xe5\x10\xbc\x8b\xd9\xf1\x25\x3b\xd8\x72\x1b\xd4\x3c\xca\x09\xf8\x40\xb4\x60\x3d\x6b\x78\xb8\x11\x0c\x7c\xd8\x82\x49\x00\x12\xcc\xe6\x09\xc3\xb4\x82\xb4\xfe\xfc\x27\xde\xa0\x1b\xd4\x3c\xc8\x9f\xb2\x19\x6e\xdf\x4c\x6e\xd0\x2b\x8c\xb2\xd1\x26\x74\x2c\x6d\xad\xdc\xd9\x7c\xfa\x71\xe7\xea\x97\xee\xb5\xff\xf4\x11\xd9\xcd\xc4\x67\x17\x4d\x2f\x5a\xb2\x1f\x83\x84\x9d\xa3\x45\xf4\x62\x60\x88\x64\x3b\x86\x4a\xba\xfa\x01\x3c\xdd\x27\x37\xdc\x2b\x0f\xb6\x01\x8f\x18\xa1\xc4\xc5\x99\xb6\x01\x71\xc1\x27\x38\x4d\x14\x8d\xbc\x19\xde\x0d\x9e\x8e\x1d\x8d\x1a\x65\xac\x97\x97\xe2\xb1\x20\x6b\x8a\xb7\x27\xcf\xaa\x27\x8e\x1e\x4a\xdd\x9c\x78\xce\x85\x4d\xac\x0d\xd8\x04\x23\xa1\xa2\x41\x4e\xfa\x33\x44\x0d\x0f\x8b\x58\xf1\xa4\xcc\xa3\x18\x92\xe2\xf5\x68\xfc\xfa\xe6\x79\x9e\xa2\xba\x55\x47\x06\x71\x86\x47\xd2\x39\x9f\x70\x27\x42\x28\xb7\x00\xa2\x18\x0d\x01\x27\x52\x2d\x06\x64\x2e\xec\xa2\xd6\xa2\x53\x84\xd3\x03\x3d\x26\x98\xeb\x63\x50\x1a\x5b\x5e\x96\x00\x45\xa4\x8a\xc1\xb8\x31\x01\xc6\x9b\x60\xb6\x18\xac\xcb\x80\x63\xab\x35\xb6\xbc\x3c\xde\xf4\xfe\x48\x00\x13\x1d\x48\xad\x56\xaa\xf7\x87\xca\x8f\xe2\x05\x09\x2d\x9e\xed\x09\xed\xf5\x95\xcd\x07\x97\xdb\xeb\x2b\xed\xf5\xff\x76\xef\xdf\x77\xaf\x5f\xd9\xbe\x6f\xec\x7e\xe6\xa5\xbe\xb2\xcc\x4b\xfd\xe9\x66\x5e\x6a\x7f\xe6\xa5\xa6\x66\x5e\xea\x6b\x99\x79\xa9\xff\x48\x99\x97\x3a\x28\xf3\x52\x07\x67\x5e\xea\xf6\x32\x2f\x75\xc7\x32\x2f\xf5\x27\x9d\x79\xa9\x43\x33\x2f\x75\x84\xcc\xeb\xf9\xc1\x48\xcf\xbc\xb6\x89\x4a\xba\xfa\x2f\x37\xf3\x8a\xc2\x8f\x47\x12\xdb\xf9\xc4\xc0\xcc\x4b\x1d\x94\x79\xa9\xdb\xcc\xbc\xd4\x21\x99\x97\xfa\xa2\x99\x97\xfa\x53\xc9\xbc\xd4\xd7\x37\xf3\x52\x53\x32\x2f\x75\xc4\xcc\x4b\x1d\x35\xf3\x52\x77\x33\xf3\x52\xdf\xf0\xcc\xcb\xbd\xf0\x37\x77\xf5\xf7\x5b\x17\xae\x74\x9f\xac\xbe\x9a\x0c\xec\xb0\xc5\x0e\x98\xa6\xb5\xf8\x2b\x44\x0e\x04\x1f\xc4\x87\xb9\x71\xf7\xab\xb3\x9d\xaf\x3f\x77\x2f\x3c\xea\x3e\xb9\xb1\xb9\xfa\x74\xeb\x8f\xab\xaf\x5d\x72\x96\xf2\x56\xfe\x0a\x48\x19\x88\x33\xb5\xbe\xc1\x11\xf3\xb5\x84\xd7\xf6\x31\x19\xc5\x75\xb7\x1e\xdf\xde\x5c\xfd\xc2\xcf\x74\x27\x80\x7b\x6d\xcd\xb7\x71\xfb\xf1\x55\xd1\xcc\x9d\xbb\x8f\xb6\x1e\xfc\xdf\xd6\xbd\xcf\x5f\x69\xcc\x3b\xe1\x60\x4a\xbc\xcf\x46\x43\x1d\xe5\xd3\xc7\xee\x93\x3f\x74\x6f\x3e\xec\x5c\xfc\xd6\x5b\x8d\x2f\xe1\x42\x3c\xd6\x8e\x83\x11\xb7\xe2\x5d\x2f\xec\x6b\xb5\xd2\x42\x5f\x38\x1a\x86\xbd\x67\x62\x9d\x24\x1e\x16\x9d\x36\xda\x4f\xef\x75\x3e\xf9\xa2\xfd\xe4\xcf\xdd\x3b\xe7\xdb\x4f\x1f\x74\xce\xae\xb9\xab\x97\xdc\x0b\x1c\xf1\xc7\x1b\x9b\xab\xab\x9b\x3f\xfc\x87\x7b\xe1\xcb\x57\x0a\xee\x11\xe4\x38\x8b\x16\xd5\x47\x05\xd7\x5d\xfb\xa8\xfb\xe7\xb3\xbb\x8c\xac\x1f\x14\xec\x48\x35\x1f\xe9\x58\x55\x0e\x45\xdc\x8a\x91\x0e\xfb\xd2\x91\x0e\xf9\x8d\x84\x74\x92\xf8\xb5\x41\x7a\x97\xb7\xa7\x5f\xe1\x72\xcd\xb2\x16\x5e\xcd\xce\x14\x08\x3f\x71\xf4\xd0\x70\x67\x3c\x71\xf4\xd0\x4b\x89\x2e\xa2\x4e\xdc\x2d\xc4\x76\xec\x77\x71\x6f\xba\xe7\xc5\xe3\x23\xf9\x5e\x2f\xf9\xb3\xbd\x2f\xfd\x68\xf3\xc2\x35\xa7\x7b\x16\x7d\xe9\xb0\xd4\x3d\xf7\x9d\xfb\xf1\x63\xf7\xda\xb9\xcd\x95\xdf\xbb\xab\xb7\x3b\xb7\xbe\x0b\x14\xdb\x5c\xfb\x6b\xe7\xf6\xd5\x82\x82\x4a\x85\x32\x55\xd2\x15\xe8\xdc\x5c\xeb\x5c\x3e\xdb\xbd\x73\xde\xbd\x76\x7b\xeb\xe3\x6b\x7b\x96\x0d\xbb\x39\x73\x40\xd7\x69\x6b\x02\xf8\x8d\xa3\x5e\x59\x5d\xd4\x0c\x93\xca\xa0\xad\x8a\xb4\x6a\x92\x36\x4c\x69\xd3\x93\xcd\x57\x18\x4c\x03\xfb\x1c\xc5\x1f\x36\xb0\xc3\xde\xe6\xcb\x63\xa8\x27\x0b\xc4\x2f\xe7\x9c\x90\xa6\x64\xc2\xd9\x13\x23\xcf\x38\x34\xf4\x93\x8b\x47\x07\xb9\x7f\x78\xbb\xe7\x83\x41\x02\x5f\x60\x7d\x08\x3c\xda\xeb\x1b\xdd\xff\xda\x78\xf7\x9d\xe3\x9b\x6b\xdf\x76\xfe\x72\xee\xef\xdf\x5f\x6e\xaf\x5f\xf1\x3b\x8f\x7c\x70\x2c\xe8\xfd\x71\xe5\x5c\x8f\x47\xbb\xd7\x2f\xb7\xd7\x3f\xd9\x15\x0f\x1c\x25\xc8\xef\x6e\x15\x6d\x41\xf1\xeb\x76\x53\xf4\x49\x29\xfe\x4d\x14\xfc\xda\x31\x1a\x84\x49\x8b\x5e\x49\xb9\x64\xf2\xff\x7d\x54\xca\x14\xa3\x85\xf4\x62\x64\x4f\x27\x6f\x9a\x63\x9c\xc1\xb3\x60\x6a\x3a\xca\xef\x4d\xab\xea\xfd\x3c\xc0\x4e\xd1\x49\xa8\x7f\xe6\x61\xc1\xaf\x7e\x8e\x7f\x47\x00\xc0\x78\xb6\xd2\x20\x1a\x33\x2c\x92\xcd\x2d\x07\xf3\xc7\xb3\x50\x16\xac\x94\x93\x2d\x92\xcd\x78\xf7\x48\x99\x89\x88\x1a\xe7\xc0\x72\xf4\x66\x58\xb6\x29\x6e\x62\xc2\xe6\x70\x05\x35\x4c\x96\xcd\xed\x8f\xc6\xc6\xb3\x19\xbe\x19\x66\x72\x32\x22\x46\x1d\x31\x9c\x5d\x06\x8e\x46\x2d\xd3\x3c\xce\xdf\x6c\x12\xb4\x26\xc0\xf4\xe4\xa4\x38\x43\x46\xa7\xd0\xe9\xec\xb2\x80\x69\x1d\xb3\x9a\xa5\xcf\x02\xc8\xdd\x0e\x4e\x08\x23\x0d\x6a\xce\x02\xa8\x38\xa8\x89\x13\xfd\x3a\x62\x68\x96\x0b\xe7\x68\x65\x72\xb2\x83\xa9\x81\x4c\xe3\x0c\xce\xe6\x44\xb2\xa0\xf2\x79\x16\x84\x2f\x06\xb2\x7e\x4d\xb3\xf8\x7a\xc1\x6b\xc8\x5e\xb1\x74\x26\x27\x6b\x8e\x93\x0d\x6b\xa4\xe1\x04\x80\x65\xd3\xd2\x16\xa0\xf0\x06\xfc\x9f\x51\x09\x59\x81\x7f\x2a\x16\x01\xb4\x16\x60\x2f\xcf\x24\x57\xa4\xeb\x07\xb9\x7b\x64\xfd\xd2\x6c\x49\x47\xa4\x8a\x29\xec\xad\x88\x1c\xcf\x66\xf6\x44\x65\xd7\x99\x9c\x5c\x63\x75\x33\xd4\x39\x41\xda\x02\xd8\x74\x70\x9f\x48\x45\x01\xd6\x42\x4f\x9f\x83\xd9\x71\xa3\x8e\xad\x06\x4b\x71\x87\xd1\x6c\xe0\xfd\x1c\xa2\xc7\x04\x20\xc0\x76\xb2\x47\xb1\x31\x91\x40\x68\x60\x4a\x2d\x1a\x43\x91\x3d\xf5\xe1\xaf\xdf\x3b\xda\x6b\x34\x4f\x01\x7f\x48\x76\x18\x62\x0d\xe7\x38\x3e\xcd\x12\x92\x63\x01\xad\x50\x72\x2b\xe7\xaf\xe0\xf0\x6f\x13\x51\x50\xc6\x15\x8b\x62\xaf\xde\xaa\x08\xa1\xdf\x1f\xb9\x41\x7f\x49\x73\xa4\x87\x6e\x69\x8d\x3a\x26\x4c\xae\x62\xf6\x8e\x89\xf9\xe3\xdb\x4b\xf3\x7a\x36\x28\xdd\xca\xc9\xba\xe1\xfd\xe0\x42\x2f\x02\xef\x17\x17\xc1\x34\xee\x10\x82\xc8\xd8\x26\x43\xf9\xf9\xd9\x94\xa8\xef\xd8\x30\x55\x84\x1a\xb7\x9c\x6c\x10\x82\xe9\x7b\xc7\xdf\x3f\x04\x8a\x00\xfa\x07\xf1\x7f\xc5\x4b\x60\x7e\x0e\x8e\xc0\x46\xac\xf6\x1a\xc8\x2a\x28\xb4\x1a\x81\x9d\xbf\x2d\xf5\x30\x8a\x53\xb2\xcc\x49\x2f\x27\xcb\xf8\x39\x59\x26\xcc\xc9\x28\xaa\xcb\x9a\x45\x1c\xcb\xc4\x32\x32\x8d\xa5\x06\xf1\xf2\xb3\x3a\x22\xa8\x8a\x15\xb4\xf0\x0b\xc7\xae\x17\xf7\x4e\xfd\x4c\x95\xa7\xf2\xfb\xa6\xf6\x4d\xfe\x7c\x5a\x26\xa8\x29\x51\x1e\x5b\x65\x1d\x2d\xc8\x33\xfb\xf6\xfd\x6c\x4a\xd5\x27\xeb\xef\xa1\xf7\xab\xd5\x4c\xc9\xbd\xf8\x27\xf7\xf1\x06\x88\xde\x80\x67\x6c\xbe\xfa\xad\x1e\x47\xe8\x2f\x9d\x7e\x43\x1c\x61\xdb\xf0\x1f\xb7\x16\x30\xd9\x3d\xcc\x43\xbc\x7d\x00\x64\x8d\x28\x48\xd3\xac\x06\x61\x0a\xe3\x82\x43\x0c\xdd\xb5\x8f\xb6\xfe\xfd\xcb\xc1\xf8\xa5\x57\x54\x0f\xc7\x70\xb0\xe1\xc2\x57\x16\x60\x00\xc5\x11\xc1\x7b\x7e\xcf\x61\x74\xf4\x59\x81\x7f\xc0\xd7\x1b\x58\x1d\x39\x35\x39\x86\xc5\x5b\xc9\x36\xb5\x2a\x86\x89\x15\x64\x1b\x92\x07\xaf\x13\xe2\xdb\x7e\xfc\x45\xf7\xd2\x65\xa9\xd4\xfd\xfe\xd6\xe6\x0f\x37\xdc\xcb\x1b\xee\xfd\xfb\x60\xee\xf0\xb1\x6c\xfb\xc9\xd3\xee\xcd\x87\x9d\x87\x0f\x3a\xf7\x9e\xe6\x06\xe3\x3f\xa0\x42\xfb\x0d\x59\xc4\xc1\xdd\xac\x17\xce\xf5\x6d\xc2\xee\x0f\x81\x98\xe5\xee\xaf\x6d\x01\x1c\xcf\x0d\x0c\x54\x57\x7e\x61\x5a\xde\x2f\x73\xcf\xd4\x24\x8d\xec\x51\xea\x06\xc1\x7c\xe5\xfb\x71\x3a\x53\xea\xdc\xfa\xc6\xfd\xfc\x33\xff\x12\x78\xc0\xda\xe7\x9b\xbb\xee\xd7\xf3\x83\x22\xc8\x2c\x2f\xc7\x45\xf8\xad\x56\xc6\xa7\x71\x16\x0d\xa6\xd5\xb2\x01\x59\x94\xec\x68\xc8\x89\x7f\x06\x33\x2b\xa4\x1e\xfd\xdb\x40\x34\xe4\xa5\xed\x61\xfe\xd1\x4a\x30\x12\x7e\x4c\x21\x32\x4b\x8f\x49\xa3\x30\x14\x6b\xfd\x45\x8e\x03\xbc\xfc\xd9\x2c\x75\x3f\x5b\x17\xf9\xf4\xa7\x3d\xcf\x62\xd1\xf2\x4e\x16\xe1\x79\x62\x4c\x38\x59\x44\xcb\xaf\x8a\xd9\x21\xab\xea\x44\x0b\x6e\x9c\x3b\x51\x16\x2a\xde\xa9\x65\x22\xce\xf5\x82\x0c\x56\x38\x83\xec\xf1\x48\x52\x12\x5c\x2f\xa9\xe3\xa2\x23\xde\x63\x5e\x0a\xeb\x7d\x5b\x6d\x22\x33\x1b\xf4\x4f\x80\xbd\xe0\x9f\xc1\x94\x97\x7f\xa6\x6b\xc9\x1d\xc5\x88\xcb\x21\x43\x67\x11\x6b\x1b\xb9\xc3\x44\x84\x6a\x3f\xa1\x9a\x24\xe4\x61\x21\xc1\x91\xa7\xfe\x89\x6f\xf4\xa1\x21\xfa\xbf\xc8\x7b\xe5\x55\x5e\xbe\x9f\x48\xdd\xa3\x3a\x0a\x61\x7c\x2c\x16\xa5\xbe\xa8\x28\x75\x88\x28\x35\x16\xa5\x28\xc0\xbf\xf1\x12\x6b\x2e\x44\x94\xa3\x89\xde\x2d\x4d\x84\x75\x16\xee\x81\x6f\x79\x5d\x6f\xc1\xd4\x8f\xe3\x83\xce\x11\x29\xd3\x1b\xd4\x4c\x21\x0f\x8e\x5e\xfe\x9a\xe6\x16\xf1\xaf\x9c\x3c\x5b\xf8\xe6\x02\xa2\x4b\x25\xcb\x18\x03\xdf\x82\xee\x83\xff\x71\x3f\xfa\xb4\x7b\xe7\xfc\x89\xa3\x87\xb6\xee\xae\x6c\x3e\xbd\xe9\xfe\xe9\x33\xff\x63\xd3\xfc\x91\xe6\x8c\x7b\xf7\x1b\xf7\xde\xca\x8f\x2b\xe7\xdc\xaf\xce\xfd\xfd\xfb\x3b\x61\x0c\xe3\x5b\x15\xe7\x27\x1b\xb6\xec\x94\x15\xc3\xfe\x71\xe5\x6c\x38\x56\x5f\x32\x6c\xd9\xb0\x0d\x5b\x26\x98\x09\xfd\xba\x4e\x1c\xd9\xa2\x68\xc9\x8b\x76\xde\xb7\x34\xc3\x0e\x5e\xb7\xe7\xbc\x16\xa8\xab\x3e\xaf\xba\xea\xb3\xd5\x55\xd3\xd4\x6d\xaa\xb2\xa7\xb1\x89\x94\x53\x8e\x45\x84\x11\xc7\xc6\x58\x97\x09\x6e\xa8\x32\xd6\x1b\x3c\x09\xab\x62\x36\x7f\x44\xb6\x6b\x91\xda\x7d\x4e\x22\x56\x7e\x88\x4e\xd2\xef\x86\xcf\xf0\x96\x74\xb8\x07\x7a\xc7\x68\xce\x15\x7a\xcb\x76\x9c\xa5\xbf\xba\x65\xfe\x48\xf8\x29\xc3\xbd\xfb\xd0\xfd\xe2\x8e\xbb\xfa\xc4\x5d\xff\xaa\x7b\xe7\xfc\xe6\xb7\x6b\xdd\x9b\x7f\x71\x3f\x7d\xd8\x5e\xff\xda\xcf\x56\x9e\x17\xea\x74\x61\xfe\x17\x52\x9f\x63\xf7\xd1\x23\xff\x2b\x7f\x0c\x7d\xb6\xbd\xbe\xb2\x79\xf1\x51\x7b\x7d\x63\xeb\xde\x67\xed\xf5\xbf\x76\xfe\xf8\xb7\xee\x9d\xf3\x7c\x3c\x17\x61\x96\x88\xc5\x91\x19\x13\x05\x2a\xfd\xc1\x39\xa1\xf0\x30\xdb\xe3\xba\xcd\x96\xa2\xed\xc3\xa8\xa4\xdc\xab\xf0\xa8\xea\xf7\xfe\xd2\xb1\x08\x28\x82\x5f\x1e\xfb\xe0\xb0\x6c\x23\xea\xe0\xbe\x1b\x8d\x8a\x45\x41\xd6\x0b\xc3\xc5\xc9\xfd\xc0\x28\xc4\xf3\x64\x13\x93\x2a\xab\xed\x07\xc6\x5b\x6f\x25\x2f\x0b\x46\x51\x13\xd9\x36\x26\x7a\x36\x71\xc5\xf0\xbb\x82\x65\x7b\x1e\xeb\xa7\x6a\x99\xf1\xe5\x58\xda\x6f\x8c\xdf\xfa\x89\x44\x26\x79\x5d\x99\x4a\x93\xed\xed\x3d\xa0\xeb\x14\x3b\xce\x6f\x26\x7f\xdb\xca\xf5\xdc\x6b\xfa\x22\x4b\xbf\x13\xba\x85\x4b\x8d\xf8\x4a\x43\x51\xc0\xd6\xca\xa5\xf6\xfa\xd7\x51\x0f\xf7\x64\x18\xed\x5b\x22\x86\xad\x16\xf4\x2f\x9f\xe0\xf3\x1b\x86\x6f\xa4\x03\xb9\xe6\xfa\x14\xeb\xbb\x6d\xea\x5b\xce\x49\xcf\x2e\x38\x36\x22\xc1\x55\x67\x46\xb3\x4c\x8b\xce\x02\x8a\xf5\x4c\xa9\xf3\xbf\x0f\x3a\x77\x2f\x75\x2e\xfd\xe0\x5e\xfc\xc6\xbd\xb6\xc6\x5d\xfc\xce\x79\x7f\x05\x14\x14\x3e\xa9\x14\x49\x6f\x89\xe9\x40\xbc\xc3\x17\x14\x2e\xa2\x34\xf6\xff\x01\x00\x00\xff\xff\xa7\x8c\xe9\xc1\x88\x46\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 18056, mode: os.FileMode(493), modTime: time.Unix(1613959441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
