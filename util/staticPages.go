// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5b\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x5f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x62\x71\x2e\xf1\x1e\x21\x14\x5f\xb2\x5b\xb5\xb5\xc5\xb6\x66\x5a\xd2\xe0\x51\xcf\xd0\xd3\x92\x31\x2e\x55\x19\x16\x12\x48\xf1\xf5\x8e\x65\x09\x0b\x61\xc9\x25\x29\xee\x8e\xd8\xd9\xab\xbd\x8d\x63\x42\xf8\x63\xa2\x91\xec\x9f\xf6\x5f\xb8\xea\xf9\xda\x23\x8d\x90\xc0\x36\x21\x1c\x3f\xe0\x99\xee\xd7\xef\xbd\x7e\x9f\xd7\xaf\x5f\xf7\x3c\x15\x6a\xac\x6e\x02\x13\x91\x6a\x11\x9e\xad\xc1\xd2\xd8\x58\xa1\x86\x91\x5e\x1a\x03\xa0\x50\xc7\x0c\x01\xad\x86\xa8\x83\x59\x11\x36\x58\x45\xda\x07\xe3\x8e\x1a\x63\xb6\x84\x4f\x37\x8c\x66\x11\xfe\x46\x3a\x71\x40\x3a\x68\xd5\x6d\xc4\x8c\xb2\x89\x21\xd0\x2c\xc2\x30\x61\x45\x38\xff\x76\x11\xeb\x55\x2c\x8c\x23\xa8\x8e\x8b\xb0\x69\xe0\x45\xdb\xa2\x4c\x20\x5d\x34\x74\x56\x2b\xea\xb8\x69\x68\x58\xf2\x5e\x26\x80\x41\x0c\x66\x20\x53\x72\x34\x64\xe2\xe2\x54\x1f\x1b\xd4\x60\x35\x8b\x0a\x4c\x4e\x19\x81\x2c\x66\x30\x13\x97\xe6\xe6\x0e\x1f\x93\xde\x79\xbf\xa0\xf8\xaf\xbc\xc3\x34\xc8\x02\xa0\xd8\x2c\x42\x87\x2d\x99\xd8\xa9\x61\xcc\x20\xa8\x51\x5c\x29\x42\xc5\x61\x88\x19\x9a\x52\xb6\x2c\xe6\x30\x8a\x6c\xb9\x6e\x10\x59\x73\x1c\x9f\xa7\xa3\x51\xc3\x66\xc0\xa1\x5a\x4c\x7a\xea\x74\x03\xd3\x25\x69\x5a\xde\x2b\x4f\x79\xd4\xa7\x1c\x58\x2a\x28\x3e\xe9\xc8\x02\x35\xab\x5e\xb7\x42\x49\x05\xc5\x87\x60\xac\x50\xb6\xf4\x25\x8f\x07\x6f\xc0\x94\x3f\x02\x50\xd0\x8d\x26\xd0\x4c\xe4\x38\x45\x48\x50\xb3\x8c\x28\xf0\xff\x48\x3a\xa2\x0b\xa0\x5c\xf5\xff\x3a\x35\xa4\x5b\x8b\x92\x53\x87\xfe\xb0\xe4\x40\x6e\x30\x64\x10\x4c\x81\x2e\x55\x4c\x7c\x06\x9c\x6a\x38\xcc\xa8\x2c\x49\x81\x25\xa5\x32\x66\x8b\x18\x93\x68\x30\x00\x05\x04\x18\xa2\x55\xee\x0b\x65\x13\x91\x85\x70\x0e\xdc\x11\x9c\x59\x45\xa9\x1a\xac\xd6\x28\xcb\x9a\x55\x57\x4e\x61\xec\x38\x4b\x79\x45\xd7\x89\x23\x55\x2d\x98\x54\x57\x2a\x53\x44\xf4\x50\x30\x32\x8d\x2a\x91\x0c\x86\xeb\x8e\xa4\x61\xc2\x30\x15\x64\x72\xa3\x37\xab\xe0\x4c\xdd\x24\x8e\x2f\x69\x56\x51\x16\x17\x17\xe5\xc5\x69\xd9\xa2\x55\x25\x3f\x39\x39\xa9\x38\xcd\x2a\x04\xbe\xf7\xc0\xfc\x24\x04\x35\x6c\x54\x6b\xcc\x7f\xae\x18\xa6\x59\x84\xc4\x22\x18\x02\x87\x51\x6b\x01\x17\xa1\xd6\xa0\x14\x13\x76\xd0\x32\x2d\x0a\x05\x51\x20\xa0\x90\x4c\x83\x60\x0d\xd9\x45\x48\xad\x06\xd1\xa1\xd8\x7c\xca\x32\x48\x6f\x7b\x28\x1a\x02\x44\x0d\x24\xd5\x0c\x5d\xc7\xa4\x08\x19\x6d\xe0\x68\xe6\x75\x2a\xe5\x93\xb2\xf8\x0a\xf8\xa5\x75\xa6\x08\x27\xc1\x24\xc8\xcf\x80\xfc\x0c\x04\x15\x4b\x6b\x38\xa8\x6c\xe2\x22\xac\x20\xd3\xc1\x09\x4b\x00\x50\xb0\x11\xab\x01\xbd\x08\xdf\xcb\x4f\x83\xa9\x9f\xa3\x3c\xc8\x03\x3e\x7a\x4a\xca\x83\xfc\xbb\xd3\xe2\xbb\x94\xff\x60\x5f\xfc\x0e\xf2\x52\xbe\x36\x63\xe6\xa5\xe9\x9a\x6a\xe6\xc1\x74\x6d\x46\xec\x03\xf9\xb3\x10\x28\x3d\xa2\x34\x83\x6a\x26\x06\xda\x99\x22\x9c\xca\x43\xa0\x2d\x15\xe1\xd4\x34\x04\xb4\x08\x67\x7a\x88\x0b\x1c\x80\x24\x64\x8c\x5a\xa4\x1a\x2f\xbe\xe0\x3d\xf6\x24\x05\x45\x3e\xa9\xe8\x46\x33\xf0\xeb\xf0\xd1\xf7\x7f\xdf\xdd\xbd\xf5\x8e\x0c\x02\xa8\xc5\xad\xc2\x1f\xb9\xdd\x97\xfc\x17\x5a\x35\x88\xc4\x2c\x7b\x16\x4c\xed\xb5\xcf\xec\x07\x56\x13\xd3\x8a\x69\x2d\xce\x02\x1f\x84\xfd\xb0\x7f\xc9\x50\x6b\x71\xc0\x8a\x30\xa5\xba\x2e\xa9\xc0\xaa\x54\x1c\xcc\xf8\xf3\xb4\xe8\xfd\x15\x8b\xd6\x4b\x63\xe2\x34\xcb\x0d\xc6\x2c\x12\x8e\x2f\x33\x02\xca\x8c\x48\x36\x35\xea\x88\x2e\x01\xa7\x51\xae\x1b\xec\x64\x99\xf5\x29\x5c\xb6\x18\xb3\xea\x81\xce\xb0\x74\x0c\x35\x71\x41\xf1\x99\x25\x05\x08\xda\x21\x13\x53\x06\xbc\xff\x25\xa7\xa1\x69\xd8\x71\x22\xb6\xba\xe1\xd8\x26\x5a\x9a\x05\xdc\xcd\xf7\xf7\xfa\x8c\x6f\x7c\x60\xe8\x45\x48\xb1\xd3\x30\xd9\x7b\x4e\x15\x96\xda\xcf\xee\xbb\x5f\xdd\xe9\x5c\xba\xe1\x7e\xfc\xa0\x1f\xa0\x08\x8c\x01\xda\xf0\xc8\x6d\x62\xd6\x2b\xaa\xb6\xb7\x87\xe0\xe4\x49\x8e\x24\x2c\xcd\x1d\x3e\xd6\xb9\x77\xd5\xfd\xf8\xa1\xfb\xc7\x0f\x0b\x4a\x6d\x6f\xcf\xb8\x7e\xce\x27\x4f\xf2\xd0\x07\x13\x0a\xf4\x92\x72\x40\xa4\x2a\xb5\x1a\x36\x10\x31\x15\x88\x4d\x54\xc6\xa6\x88\xaf\x53\x97\xf2\x80\x3f\x78\x63\xbd\x6e\x1e\xac\xbd\x87\x94\xf1\x3d\xde\xe1\xd4\xa5\xa9\xc9\x14\x39\x29\x6a\x69\x35\xac\x2d\x80\xf8\x51\x32\x08\x8f\x1e\x7d\xb2\x53\x78\x01\x50\x30\x88\xdd\x60\xfd\xfc\x24\xaf\x1d\x02\xb6\x64\xe3\x22\xa4\x48\x37\x2c\x18\xec\x83\x73\xc4\x39\x8c\xea\x18\x7a\x30\x23\xd3\xd0\x89\x03\x41\x13\x99\x0d\x1c\xbf\x5a\x44\x33\x0d\x6d\x21\x6c\x38\xc8\x59\x62\xfd\x5f\x1a\x24\x9b\x83\x60\x79\xd9\xa8\x00\x7c\x1a\x8c\xcb\x73\x87\x8f\xc9\x9c\x17\x08\x07\xb6\x5a\x9a\x4f\xba\xbc\x8c\x89\xde\x6a\x0d\x50\x3a\x61\x6c\x41\x69\x7f\xa6\xdc\x16\x91\x2a\xe9\x1c\x00\x38\xe0\x75\x67\xb7\xee\x3c\xdb\xfa\xe8\x4a\x7b\xe3\x66\x2e\x5d\xd2\x20\xbc\x12\xd1\xe4\x75\x06\x48\x27\x8e\x6d\xe9\x11\x40\xe1\x6b\x04\x90\xdf\x30\x1c\xa0\x60\xe0\x0e\x02\x14\x70\x1c\x04\xd0\x9c\xd7\x9d\xdd\xbc\xf8\xfd\xe6\xea\xda\x1b\x0c\x90\x66\x5a\x0d\xbd\x62\x22\x8a\x23\x90\xc4\xa6\x08\xa8\xb8\x71\x38\x58\x02\x83\x1d\x04\x4c\xe0\x3a\x08\xb4\x83\x11\xc9\x1b\x8a\x56\xad\x81\x16\xb1\xe1\x59\x22\x82\x2b\xd1\x16\xe1\x25\xb4\x0e\x07\x4c\x64\xb1\x83\x88\x89\x6c\x07\x41\xe6\x5e\xbd\xd6\x5e\xdf\x68\x6f\xdc\xdc\x39\xc4\x9c\x3a\x32\xcd\x30\xfa\x9c\xac\x61\xd3\x86\x09\x45\x19\x3e\xc3\x00\xff\x4f\xaa\x37\x18\xd6\xbd\x33\x0c\x1f\x92\xb2\x2d\xa6\xc9\xe8\xcf\x17\xc0\x4b\x6e\xd7\x9e\x91\xe6\x88\x33\x3f\x17\x05\xcb\x79\xfd\x90\x6f\xc0\x61\x5b\xf9\xfc\xdc\x4e\x6c\xe6\x29\xee\x68\x11\x46\x2d\x53\xf0\xbe\x50\xbb\xe0\x31\xf0\xba\xe5\x65\xcf\x7f\xe6\xe7\x5a\xad\xb4\x09\xbe\x1a\xc3\x1d\xc3\x1a\xe5\x27\xcc\xc0\x78\xfe\xeb\x88\x06\xf4\x89\x5f\x95\x11\x45\x4d\x85\xd7\xa4\x31\xfd\xd6\xed\x19\xb4\x8f\x70\x67\xd3\xdb\xf9\x23\x1f\xcc\xbc\xf2\xb4\xd6\x83\xdb\xb0\x9b\x33\x27\x31\x41\xfe\xa5\x4b\x12\x5c\x58\xea\xdc\x59\x73\x6f\x7c\xe9\xde\x58\xeb\xde\x7a\xb4\x73\x98\xfa\xe1\xd8\x0b\x6c\x65\xeb\x0c\x4c\x8d\xdb\x3c\xf8\xa7\x9e\xd3\xbc\x23\x8f\x07\x78\x42\x75\xdf\x25\xe6\xed\xe6\xcc\xdb\x41\x4b\x1c\x91\x79\xab\xec\x37\x03\x7e\xa6\x1e\x1e\x8b\x5f\xc5\x42\xf3\xd4\x6f\xd0\x11\xd6\xd4\xe6\xb5\x6f\xdc\xeb\xb7\xe7\x8f\x74\x6e\x7f\xeb\x7e\x77\xfd\x15\x9e\x36\x76\x6e\xbb\xe5\x10\xbc\x83\xd9\xf1\x25\x3b\xd8\x72\x1b\xd4\x3c\xca\x09\x78\x47\xb4\x60\x3d\x6b\x78\xb8\x11\x0c\x7c\xd8\x82\x41\x00\x12\xcc\xe6\x09\xc3\xb4\x82\xb4\xfe\xfc\x27\xde\xa0\x1b\xd4\x3c\xc8\x9f\xb2\x19\x6e\xdf\x4c\x6e\xd0\x14\x46\xd9\x68\x13\x3a\x96\xb6\x56\xee\x6e\x3e\xfb\xa8\x73\xed\x0b\xf7\xfa\x7f\xf8\x88\xec\x66\xe2\xb3\x8b\xa6\x17\x2d\xd9\x8f\x41\xc2\xce\xd1\x22\x7a\x39\x30\x44\xb2\x1d\x43\x25\x5d\xfd\x00\x9e\xee\xd3\x9b\xee\xd5\x87\xdb\x80\x47\x8c\x50\xe2\xe2\x4c\xdb\x80\xb8\xe0\x13\x9c\x26\x8a\x46\xde\x08\xef\x0e\x4f\xc7\x8e\x46\x8d\x32\xd6\xcb\x4b\x71\x5f\x90\x35\xc5\xdb\x93\x67\xd5\x13\x47\x0f\xa5\x6e\x4e\x3c\xe7\xc2\x26\xd6\x06\x6c\x82\x91\x50\xd1\x20\x27\xfd\x11\xa2\x86\x87\x45\xac\x78\x52\xe6\x51\x0c\x49\xf1\x7a\x34\x7e\x7d\xf3\x3c\x4f\x51\xdd\xaa\x23\x83\x38\xc3\x23\xe9\x9c\x4f\xb8\x13\x21\x94\x5b\x00\x51\x8c\x86\x80\x13\xa9\x16\x03\x32\x17\x36\x51\x6b\xd1\x29\xc2\xe9\x81\x1e\x13\x8c\xf5\x31\x28\x8d\x2d\x2f\x4b\x80\x22\x52\xc5\x60\xdc\x98\x00\xe3\x4d\x30\x5b\x0c\xd6\x65\xc0\xb1\xd5\x1a\x5b\x5e\x1e\x6f\x7a\x7f\x24\x80\x89\x0e\xa4\x56\x2b\xd5\xfb\x43\xe5\x47\xf1\x82\x84\x16\xcf\xf7\x84\xf6\xfa\xca\xe6\xc3\x2b\xed\xf5\x95\xf6\xfa\x7f\xb9\x0f\x1e\xb8\x37\xae\x6e\xdf\x37\x76\x3f\xf3\x52\x5f\x2c\xf3\x4a\xaa\xbc\x83\x7e\xac\xfe\x74\xf3\x30\xb5\x3f\x0f\x53\x53\xf3\x30\xf5\xb5\xcc\xc3\xd4\xff\x4f\x79\x98\x3a\x28\x0f\x53\x07\xe7\x61\xea\xf6\xf2\x30\x75\xc7\xf2\x30\xf5\x27\x9d\x87\xa9\x43\xf3\x30\x75\x84\x3c\xec\xc5\xc1\x48\xcf\xc3\xb6\x89\x4a\xba\xfa\xaf\x36\x0f\x8b\xc2\x8f\x47\x12\xdb\xf9\xc4\xc0\x3c\x4c\x1d\x94\x87\xa9\xdb\xcc\xc3\xd4\x21\x79\x98\xfa\xb2\x79\x98\xfa\x53\xc9\xc3\xd4\xd7\x37\x0f\x53\x53\xf2\x30\x75\xc4\x3c\x4c\x1d\x35\x0f\x53\x77\x33\x0f\x53\xdf\xf0\x3c\xcc\xbd\xf8\x77\x77\xf5\x0f\x5b\x17\xaf\x76\x9f\xae\xfe\x38\x37\x61\x87\x2d\x76\xc0\x34\xad\xc5\x5f\x23\x72\x20\xf8\x3c\x3e\xcc\x8d\xbb\x5f\x9e\xeb\x7c\xf5\x99\x7b\xf1\x71\xf7\xe9\xcd\xcd\xd5\x67\x5b\x7f\x5a\x7d\xed\x92\xb3\x94\x59\xf9\x2b\x20\xa5\x23\xce\xd4\xfa\x3a\x47\xcc\xd7\x12\x5e\xdb\xc7\x64\x14\xd7\xdd\x7a\x72\x67\x73\xf5\x73\x3f\xd3\x9d\x00\xee\xf5\x35\xdf\xc6\xed\x27\xd7\x44\x33\x77\xee\x3d\xde\x7a\xf8\xbf\x5b\xf7\x3f\x7b\x29\xbf\x4e\x36\xee\x94\xff\x9c\x70\x30\x25\xde\x27\xa5\xa1\x6e\xf3\xc9\x13\xf7\xe9\x1f\xbb\xb7\x1e\x75\x2e\x7d\xe3\xad\xcd\x57\x70\x59\x1e\x6b\xc7\xa1\x89\xdf\xe2\x3d\x30\x6c\x6b\xb5\xd2\x02\x61\xd8\x1b\x06\xc1\xe7\x22\x9f\x24\x1e\x16\xab\x36\xda\xcf\xee\x77\x3e\xfe\xbc\xfd\xf4\x2f\xdd\xbb\x17\xda\xcf\x1e\x76\xce\xad\xb9\xab\x97\xdd\x8b\x1c\xff\x27\x1b\x9b\xab\xab\x9b\xdf\xff\xbb\x7b\xf1\x8b\x1f\x75\x7b\x3b\x82\x1c\x67\xd1\xa2\xfa\xa8\xe0\xba\x6b\x1f\x76\xff\x72\x6e\x97\x91\xf5\x43\x84\x1d\xa9\xe6\x23\x1d\xab\xca\xa1\x88\xdf\x62\xa4\xc3\xb6\x74\xa4\x43\x7e\x23\x21\x9d\x24\x7e\x6d\x90\xde\xe5\xcd\xea\xd7\xb8\x5c\xb3\xac\x85\xd7\xe1\xde\x20\x50\xe5\xc4\xd1\x43\xc3\x5d\xf3\xc4\xd1\x43\xaf\x24\xd6\x88\x3a\x71\x27\x11\xdf\x63\x2f\x8c\x5b\xd3\xfd\x30\xee\x1f\xc9\x13\x7b\xc9\x9f\xef\x8b\xe9\xc7\x9e\x97\xae\x4f\xdd\xb3\xe8\x4b\x87\xa5\xee\xf9\x6f\xdd\x8f\x9e\xb8\xd7\xcf\x6f\xae\xfc\xc1\x5d\xbd\xd3\xb9\xfd\x6d\xa0\xd8\xe6\xda\xdf\x3a\x77\xae\x15\x14\x54\x2a\x94\xa9\x92\xae\x40\xe7\xd6\x5a\xe7\xca\xb9\xee\xdd\x0b\xee\xf5\x3b\x5b\x1f\x5d\xdf\xb3\x6c\xd8\xcd\x99\x03\xba\x4e\x5b\x13\xc0\x7f\x39\xea\x15\xe0\x45\xaf\x61\xc2\x19\xbc\xab\x22\xad\x9a\xa4\x0d\xd3\xdd\xf4\x44\xf4\x47\x0c\xad\x81\x7d\x8e\xe2\xd3\x0d\xec\xb0\x5f\xf2\xc5\x32\xd4\x93\x05\xe2\x57\x73\x86\x48\x53\x32\xe1\xec\x89\x9e\xe7\x1c\x28\xfa\xc9\xc5\x63\x85\xdc\xdf\xbd\xdd\xb3\xc3\x20\x81\x2f\xb1\x3e\x04\x1e\xed\xf5\x8d\xee\x7f\x6e\xbc\xf3\xf6\xf1\xcd\xb5\x6f\x3a\x7f\x3d\xff\x8f\xef\xae\xb4\xd7\xaf\xfa\x8d\x47\xde\x3f\x16\xb4\xfe\xb0\x72\xbe\xc7\xa3\xdd\x1b\x57\xda\xeb\x1f\xef\x8a\x07\x8e\x12\xf2\x77\xb7\xde\xb6\xa0\xf8\x15\xbe\x29\xfa\xa4\x94\x09\x27\x4a\x83\xed\x18\x0d\xc2\xa4\x45\xaf\xfc\x5c\x32\xf9\xff\x3e\x2a\x65\x8a\xd1\x42\x7a\xd9\xb2\xa7\x93\x37\xcc\x31\xce\xe2\x59\x30\x35\x1d\xe5\xfe\xa6\x55\xf5\x7e\x4a\x60\xa7\xe8\x24\xd4\x4a\xf3\xb0\xe0\x4d\xa3\x10\xff\xe6\x00\x80\xf1\x6c\xa5\x41\x34\x66\x58\x24\x9b\x5b\x0e\xc6\x8f\x67\xa1\x2c\x58\x29\x27\x5b\x24\x9b\xf1\xee\x98\x32\x13\x11\x35\xce\x81\xe5\x68\x66\x58\xb6\x29\x6e\x62\xc2\xe6\x70\x05\x35\x4c\x96\xcd\xed\x8f\xfa\xc6\xb3\x19\xbe\x35\x66\x72\x32\x22\x46\x1d\x31\x9c\x5d\x06\x8e\x46\x2d\xd3\x3c\xce\x67\x36\x09\x5a\x13\x60\x7a\x72\x52\x1c\x21\xa3\x53\xe8\x4c\x76\x59\xc0\xb4\x8e\x59\xcd\xd2\x67\x01\xe4\x6e\x07\x27\x84\x9e\x06\x35\x67\x01\x54\x1c\xd4\xc4\x89\x76\x1d\x31\x34\xcb\x85\x73\xb4\x32\x39\xd9\xc1\xd4\x40\xa6\x71\x16\x67\x73\x22\x59\x50\x23\x3d\x0b\xc2\x89\x81\xac\x5f\xfd\x2c\x4e\x2f\x98\x86\xec\x95\x55\x67\x72\xb2\xe6\x38\xd9\xb0\x9a\x1a\x4e\x00\x58\x36\x2d\x6d\x01\x0a\x33\xe0\xff\x8c\x4a\xc8\x0a\xfc\x53\xb1\x08\xa0\xb5\x00\x7b\x79\x26\xb9\x22\x5d\x3f\xc8\xdd\x23\xeb\x17\x71\x4b\x3a\x22\x55\x4c\x61\x6f\xed\xe4\x78\x36\xb3\x27\x2a\xd0\xce\xe4\xe4\x1a\xab\x9b\xa1\xce\x09\xd2\x16\xc0\xa6\x83\xfb\x44\x2a\x0a\xb0\x16\x7a\xda\x1c\xcc\x8e\x1b\x75\x6c\x35\x58\x8a\x3b\x8c\x66\x03\xef\xa7\x13\x3d\x26\x00\x01\xb6\x93\x3d\x8a\x8d\x89\x04\xc2\x0b\xa6\xd4\xa2\x31\x14\xd9\x53\xa7\x7f\xf3\xee\xd1\x5e\xa3\x79\x0a\xf8\x5d\xb2\xc3\x10\x6b\x38\xc7\xf1\x19\x96\x90\x1c\x0b\x68\x85\x92\x5b\x39\x7f\x05\x87\x7f\x9b\x88\x82\x32\xae\x58\x14\x7b\x95\x59\x45\x08\xfd\xf6\xc8\x0d\xfa\x8b\x9f\x23\x3d\x74\x4b\x6b\xd4\x31\x61\x72\x15\xb3\xb7\x4d\xcc\x1f\x7f\xb9\x34\xaf\x67\x83\x22\xaf\x9c\xac\x1b\xde\x8f\x33\xf4\x22\xf0\x7e\x9d\x11\x0c\xe3\x0e\x21\x88\x8c\x6d\x32\x94\x9f\x9f\x4d\x89\xfa\x8e\x0d\x53\x45\xa8\x86\xcb\xc9\x06\x21\x98\xbe\x7b\xfc\xbd\x43\xa0\x08\xa0\x7f\x48\xff\x57\xbc\x04\xe6\xe7\xe0\x08\x6c\xc4\xba\xb0\x81\xac\x82\x92\xac\x11\xd8\xf9\xdb\x52\x0f\xa3\x38\x25\xcb\x9c\xf4\x72\xb2\x8c\x9f\x93\x65\xc2\x9c\x8c\xa2\xba\xac\x59\xc4\xb1\x4c\x2c\x23\xd3\x58\x6a\x10\x2f\x3f\xab\x23\x82\xaa\x58\x41\x0b\xbf\x70\xec\x7a\x71\xef\xd4\xcf\x54\x79\x2a\xbf\x6f\x6a\xdf\xe4\xcf\xa7\x65\x82\x9a\x12\xe5\xb1\x55\xd6\xd1\x82\x3c\xb3\x6f\xdf\xcf\xa6\x54\x7d\xb2\xfe\x2e\x7a\xaf\x5a\xcd\x94\xdc\x4b\x7f\x76\x9f\x6c\x80\x68\x06\x3c\x63\xf3\xd5\x6f\xf5\x38\x42\x7f\x91\xf5\x1b\xe2\x08\xdb\x86\xff\xb8\xb5\x80\xc9\xee\x61\x1e\xe2\xed\x03\x20\x6b\x44\x41\x9a\x66\x35\x08\x53\x18\x17\x1c\x62\xe8\xae\x7d\xb8\xf5\x6f\x5f\x0c\xc6\x2f\xbd\xf6\x7a\x38\x86\x83\x0d\x17\x4e\x59\x80\x01\x14\x47\x04\xef\xc5\x3d\x87\xd1\xd1\x47\x05\xfe\x01\x5f\x6f\x60\x75\xe4\xd4\xe4\x18\x16\x6f\x25\xdb\xd4\xaa\x18\x26\x56\x90\x6d\x48\x1e\xbc\x4e\x88\x6f\xfb\xc9\xe7\xdd\xcb\x57\xa4\x52\xf7\xbb\xdb\x9b\xdf\xdf\x74\xaf\x6c\xb8\x0f\x1e\x80\xb9\xc3\xc7\xb2\xed\xa7\xcf\xba\xb7\x1e\x75\x1e\x3d\xec\xdc\x7f\x96\x1b\x8c\xff\x80\x5a\xee\x37\x64\x11\x07\xf7\xb6\x5e\x38\xd7\xb7\x09\xbb\xdf\x05\x62\x96\xbb\xbf\xb6\x05\x70\x3c\x37\x30\x50\x5d\xf9\x85\x69\x79\xbf\xe2\x3d\x5b\x93\x34\xb2\x47\xa9\x1b\x04\xf3\x95\xef\xc7\xe9\x4c\xa9\x73\xfb\x6b\xf7\xb3\x4f\xfd\x0b\xe2\x01\x6b\x9f\x6f\xee\xba\x5f\xf9\x0f\x8a\x20\xb3\xbc\x1c\x97\xeb\xb7\x5a\x19\x9f\xc6\x59\x34\x98\x56\xcb\x06\x64\x51\xb2\xa3\x21\x27\xfe\xc1\xcc\xac\x90\x7a\xf4\x6f\x03\x51\x97\x97\xb6\x87\xf9\x47\x2b\xc1\x48\xf8\xd9\x85\xc8\x2c\x3d\x26\x8d\xc2\x50\xfc\x55\x80\xc8\x71\x80\x97\x3f\x9f\xa5\xee\x67\xeb\x22\x9f\xfe\xb4\xe7\x79\x2c\x5a\xde\xc9\x22\x3c\x4f\x8c\x09\x27\x8b\x68\xf9\x55\x31\x3b\x64\x55\x9d\x68\xc1\x8d\x73\x27\xca\x42\xc5\x3b\xb5\x4c\xc4\xb9\x5e\x90\xc1\x0a\x67\x90\x3d\x1e\x49\x4a\x82\xeb\x25\x75\x5c\x74\xc4\x7b\xcc\x4b\x61\xbd\xef\xae\x4d\x64\x66\x83\xf6\x09\xb0\x17\xfc\x33\x98\xf2\xf2\xcf\x74\x2d\xb9\xa3\x18\x71\xe1\x64\xe8\x2c\x62\x15\x24\x77\x98\x88\x50\xed\x27\x54\x93\x84\x3c\x2c\x24\x38\xf2\xd4\x3f\xf1\xfd\x3e\x34\x44\xff\xd7\x7a\xaf\x10\xcb\xcb\xf7\x13\xa9\x7b\x54\x63\x21\xf4\x8f\xc5\xa2\xd4\x97\x15\xa5\x0e\x11\xa5\xc6\xa2\x14\x05\xf8\x37\x5e\x62\x3d\x86\x88\x72\x34\xd0\xbb\xa5\x89\xb0\xce\xc2\x3d\xf0\x2d\xaf\xe9\x2d\x98\xfa\xe1\x7c\xd0\x39\x22\x65\x78\x83\x9a\x29\xe4\xc1\xd1\xcb\x5f\xd3\xdc\x22\xfe\x95\x93\x67\x0b\xdf\x5c\x40\x74\xa9\x64\xc1\x63\xe0\x5b\xd0\x7d\xf8\xdf\xee\x87\x9f\x74\xef\x5e\x38\x71\xf4\xd0\xd6\xbd\x95\xcd\x67\xb7\xdc\x3f\x7f\xea\x7f\x88\x9a\x3f\xf2\xc1\x8c\x7b\xef\x6b\xf7\xfe\xca\x0f\x2b\xe7\xdd\x2f\xcf\xff\xe3\xbb\xbb\x61\x0c\xe3\x5b\x15\xe7\x27\x1b\xb6\xec\x94\x15\xc3\xfe\x61\xe5\x5c\xd8\x57\x5f\x32\x6c\xd9\xb0\x0d\x5b\x26\x98\x09\xed\xba\x4e\x1c\xd9\xa2\x68\xc9\x8b\x76\xde\x77\x36\xc3\x0e\xa6\xdb\x73\x5e\x0b\xd4\x55\x5f\x54\x5d\xf5\xf9\xea\xaa\x69\xea\x36\x55\xd9\xd3\xd8\x44\xca\x29\xc7\x22\x42\x8f\x63\x63\xac\xcb\x04\x37\x54\x19\xeb\x0d\x9e\x84\x55\x31\x9b\x3f\x22\xdb\xb5\x48\xed\x3e\x27\x11\xab\x42\x44\x27\xe9\x77\xc3\xe7\x78\x4b\x3a\xdc\x03\xbd\x63\x34\xe7\x0a\xbd\x65\x3b\xce\xd2\x5f\xf9\x32\x7f\x24\xfc\xb0\xe1\xde\x7b\xe4\x7e\x7e\xd7\x5d\x7d\xea\xae\x7f\xd9\xbd\x7b\x61\xf3\x9b\xb5\xee\xad\xbf\xba\x9f\x3c\x6a\xaf\x7f\xe5\x67\x2b\x2f\x0a\x75\xba\x30\xff\xeb\xa9\xcf\xb1\xfb\xf8\xb1\x5f\x01\x10\x43\x9f\x6d\xaf\xaf\x6c\x5e\x7a\xdc\x5e\xdf\xd8\xba\xff\x69\x7b\xfd\x6f\x9d\x3f\xfd\xbd\x7b\xf7\x02\xef\xcf\x45\x98\x25\x62\x71\x64\xc6\x44\xf1\x4a\x7f\x70\x4e\x28\x3c\xcc\xf6\xb8\x6e\xb3\xa5\x68\xfb\x30\x2a\x29\xf7\x2a\x3c\xaa\xfa\xad\xbf\x72\x2c\x02\x8a\xe0\x57\xc7\xde\x3f\x2c\xdb\x88\x3a\xb8\xef\x46\xa3\x62\x51\x90\xf5\xc2\x70\x71\x72\x3f\x30\x0a\xf1\x38\xd9\xc4\xa4\xca\x6a\xfb\x81\xf1\xd6\x5b\xc9\xcb\x82\x51\xd4\x44\xb6\x8d\x89\x9e\x4d\x5c\x31\xfc\xbe\x60\xd9\x9e\xc7\xfa\xa9\x5a\x66\x7c\x39\x96\xf6\x5b\xe3\x77\x7e\x22\x91\x49\x5e\x57\xa6\xd2\x64\x7b\x5b\x0f\xe8\x3a\xc5\x8e\xf3\xdb\xc9\xdf\xb5\x72\x3d\xf7\x9a\xbe\xc8\xd2\xef\x85\x66\xe1\x52\x23\xbe\xd2\x50\x14\xb0\xb5\x72\xb9\xbd\xfe\x55\xd4\xc2\x3d\x19\x46\xfb\x96\x88\x61\xab\x05\xfd\xcb\x27\xf8\xe2\x86\xe1\x1b\xe9\x40\xae\xb9\x3e\xc5\xfa\x6e\x9b\xfa\x96\x73\xd2\xb3\x0b\x8e\x8d\x48\x70\xd5\x99\xd1\x2c\xd3\xa2\xb3\x80\x62\x3d\x53\xea\xfc\xcf\xc3\xce\xbd\xcb\x9d\xcb\xdf\xbb\x97\xbe\x76\xaf\xaf\x71\x17\xbf\x7b\xc1\x5f\x01\x05\x85\x0f\x2a\x45\xd2\x5b\x62\x3a\x10\xef\xf0\x05\x85\x8b\x28\xfd\x5f\x00\x00\x00\xff\xff\xf7\x2a\xa4\x65\xb3\x46\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 18099, mode: os.FileMode(493), modTime: time.Unix(1608885781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
