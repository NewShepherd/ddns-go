// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x7f\x73\x13\xc7\x7b\xff\xdf\xaf\x62\xbf\x8b\x67\x2c\x77\x7c\x77\xb6\x6c\x14\xe2\xe8\x94\x01\x4c\x83\x27\x40\x18\x8c\xd3\x74\x3a\x1d\xcf\xea\x6e\x25\xad\x7d\xb7\x77\xec\xee\xc9\x36\x1a\xcd\x00\x2d\x24\xa1\xd0\x40\x43\x52\x9a\x40\x08\x99\x24\x43\x3b\x8d\x9d\x76\x3a\x8d\xc7\x04\xfc\x62\x22\xc9\xe6\xaf\xbc\x85\xce\xde\xe9\x7e\x48\x3a\xd9\x4a\xb0\xc1\x85\x3f\xac\xdb\xdd\x67\x9f\x7d\xee\xf9\x7c\x76\x9f\x67\xa5\x87\x7c\x45\xd8\x16\xb0\x10\x2d\xeb\xf0\x72\x05\x16\x86\x86\xf2\x15\x8c\xcc\xc2\x10\x00\x79\x1b\x0b\x04\x8c\x0a\x62\x1c\x0b\x1d\x7a\xa2\xa4\x1c\x83\xf1\x40\x45\x08\x57\xc1\x97\x3c\x52\xd5\xe1\x47\xca\xfc\x71\xe5\xa4\x63\xbb\x48\x90\xa2\x85\x21\x30\x1c\x2a\x30\x15\x3a\x9c\x3d\xa5\x63\xb3\x8c\x13\xf3\x28\xb2\xb1\x0e\xab\x04\x2f\xbb\x0e\x13\x09\xd1\x65\x62\x8a\x8a\x6e\xe2\x2a\x31\xb0\xe2\x37\xc6\x00\xa1\x44\x10\x64\x29\xdc\x40\x16\xd6\x27\x7a\xd4\x20\x4f\x54\x1c\x96\x50\xb2\x48\xda\x6b\x09\x22\x2c\x5c\x98\x99\x39\x37\xa7\xbc\xf7\x41\x5e\x0b\x9a\x72\xe0\x2f\x8a\x02\x4e\x38\x8e\xe0\x82\x21\x17\x9c\x9c\x9b\x03\x8a\xe2\x0f\x58\x84\x2e\x01\x86\x2d\x1d\x72\xb1\x6a\x61\x5e\xc1\x58\x40\x50\x61\xb8\xa4\x43\x8d\x0b\x24\x88\xa1\x15\xc3\x89\xaa\x4d\xa8\x6a\x70\x0e\x07\x9e\x6a\x38\xb6\xed\x24\xe6\x70\x83\x11\x57\x00\xce\x8c\x58\x66\xf1\x92\x87\xd9\xaa\x32\xa9\x1e\x55\x27\xfc\x15\x16\x39\x2c\xe4\xb5\x40\xb4\x30\x94\xd7\x02\x6c\x86\xf2\x45\xc7\x5c\xf5\xb5\xc8\x0e\xcc\xe4\x23\x00\x79\x93\x54\x81\x61\x21\xce\x75\x48\x51\xb5\x88\x18\x08\x3e\x14\x13\xb1\x25\x50\x2c\x07\x9f\xbc\x82\x4c\x67\x59\xe1\x36\x0c\xa6\x75\x4e\x94\x9e\x44\x84\x62\x06\x4c\xa5\x64\xe1\x15\xb0\xe8\x71\x41\x4a\xab\x4a\xdb\xc5\x4a\x11\x8b\x65\x8c\x69\x34\x19\x80\x3c\x0a\x5f\x15\x76\x2e\xaf\x14\x19\xa2\x66\xa8\x08\x59\xa4\x4c\x15\x22\xb0\xcd\x15\x03\x53\x81\x59\x42\x87\x74\x48\xb5\x0c\x56\x6c\x8b\x72\x1d\x4a\x6e\x4d\x6b\xda\xf2\xf2\xb2\xba\x3c\xa9\x3a\xac\xac\x65\xc7\xc7\xc7\x35\x5e\x2d\x43\x10\xd0\x04\x66\xc7\x21\xa8\x60\x52\xae\x88\xe0\xb9\x44\x2c\x4b\x87\xd4\xa1\x18\x02\x2e\x98\xb3\x84\x75\x68\x78\x8c\x61\x2a\x4e\x3a\x96\xc3\x60\x62\x29\xd0\x96\x50\x2c\x42\xb1\x81\x5c\x1d\x32\xc7\xa3\x26\x4c\x76\x2f\x3a\x84\x76\xf7\x87\x4b\x43\x80\x18\x41\x4a\x85\x98\x26\xa6\x3a\x14\xcc\xc3\xd1\x9b\xdb\x4c\xc9\x76\xae\x25\xa9\x7e\xc2\x59\xd1\xe1\x38\x18\x07\xd9\x29\x90\x9d\x82\xa0\xe4\x18\x1e\x47\x45\x0b\xeb\xb0\x84\x2c\x8e\x3b\x3c\x01\x40\xde\x45\xa2\x02\x4c\x1d\x9e\xcd\x4e\x82\x89\xb7\x51\x16\x64\x81\x9c\x3d\xa1\x64\x41\xf6\xf4\x64\xb2\xad\x64\x3f\x3c\x16\xb7\x41\x56\xc9\x56\xa6\xac\xac\x32\x59\xc9\x59\x59\x30\x59\x99\x4a\x8e\x81\xec\x65\x08\xb4\xae\xa5\x0c\xc2\x0c\x0b\x03\x63\x45\x87\x13\x59\x08\x8c\x55\x1d\x4e\x4c\x42\xc0\x74\x38\x25\x85\xf3\xd2\xeb\x9d\x38\x09\xe6\xd0\x72\xbc\xb5\xda\xed\x98\x0e\x1a\x8a\x88\xa5\x99\xa4\xda\x26\x67\xf8\x18\x90\x38\xe0\xac\xbf\x9b\x11\xa1\x80\x39\xd2\x15\xf2\x51\x3a\x7b\x35\x68\xb0\x32\xa1\x8a\x70\xdc\x69\x30\x71\xd4\x5d\x81\xbd\x24\x67\xce\x72\x1f\x0e\x5b\x8a\x6d\x2a\x39\xe0\x94\x4a\x1c\x0b\xf9\x3c\x99\xe4\x6b\xc9\x61\x76\x61\x28\xf9\x4e\x45\x4f\x08\x87\x86\xf3\x8b\x82\x82\xa2\xa0\x8a\xcb\x88\x8d\xd8\x2a\xe0\x5e\xd1\x26\x62\xa1\x28\x7a\xac\x2b\x3a\x42\x38\x76\x60\xe0\x3b\xb0\x30\x87\xaa\x38\xaf\x05\xca\x3a\x17\x48\x58\x87\x2c\xcc\x04\xf0\xff\x2a\xdc\x33\x0c\xcc\x79\xa4\xd6\x24\xdc\xb5\xd0\xea\x34\x90\x44\x7e\xa7\x9b\x15\x81\xa7\x01\x31\x75\xc8\x30\xf7\x2c\x71\x96\x97\x61\xa1\xb1\xf5\xb0\xf9\xd3\xfd\xd6\x27\x77\x9a\x37\x1f\xf5\xa2\x11\x79\xbe\x8f\x35\xf2\x10\xb6\xb0\xe8\x5e\xaa\x72\xb4\x4b\x60\x61\x41\xc2\x06\x0b\x33\xe7\xe6\x5a\x0f\x6e\x37\x6f\x3e\x6e\x7e\x71\x23\xaf\x55\x8e\x76\xcd\xeb\xd5\xbc\xb0\x20\x0f\x2b\xd8\x61\x40\xb7\xa8\x04\x44\x29\x33\xc7\x73\x41\x12\xd3\x84\xb0\x85\x8a\xd8\x4a\xe2\xcb\x6d\x25\x0b\xe4\x83\x3f\xd7\x1f\x96\x47\xa5\xff\x90\x32\xbf\x8b\x1d\xdc\x56\x26\xc6\x53\xd6\x49\x31\xcb\xa8\x60\x63\x09\xc4\x8f\x0a\xa1\xf2\x7c\xe8\x59\x3b\x45\x17\x00\x79\x42\x5d\x4f\xf4\xea\x53\xfc\x7e\x08\xc4\xaa\x8b\x75\xc8\x90\x49\x1c\xd8\x0e\x69\x33\x94\x9f\x43\x36\x86\x3e\xcc\xc8\x22\x26\xe5\x10\x54\x91\xe5\xe1\xb8\xe9\x50\xc3\x22\xc6\x52\xd8\x71\x52\xaa\xc4\xe6\x5f\x7b\x34\x33\x0a\x41\xad\x46\x4a\x00\x5f\x02\xc3\xea\xcc\xb9\x39\x55\xea\x02\xe1\xc4\x7a\xdd\x08\x44\x6b\x35\x4c\xcd\x7a\xbd\x8f\xd1\x1d\xce\x4e\x18\x1d\xbc\xa9\xf4\x45\x64\x4a\xba\x06\x00\x8e\xfb\xc3\x99\x17\xf7\xb7\x5e\x7c\x7c\xab\xb1\x79\x77\x34\x7d\xa5\x7e\x78\x75\x1c\x1d\x87\x19\x20\x93\x72\xd7\x31\x23\x80\xc2\x66\x04\x50\xd0\xb1\x37\x40\xed\x89\xfb\x08\x50\x5b\x63\x3f\x80\x66\xfc\xe1\xcc\xce\xf5\xe7\x3b\x6b\xeb\x6f\x30\x40\x86\xe5\x78\x66\xc9\x42\x0c\x47\x20\x25\xbb\x22\xa0\xe2\xce\xbd\xc1\x4a\x28\xd8\x47\xc0\x12\x5a\xfb\x81\x76\x32\x12\x79\x43\xd1\xaa\x78\x68\x19\x13\xdf\x13\x11\x5c\x1d\x7d\x11\x5e\x89\xde\xbd\x01\x4b\xaa\xd8\x47\xc4\x92\x6a\xfb\x41\xd6\xbc\xfd\xcf\x8d\x8d\xcd\xc6\xe6\xdd\xfd\x43\x8c\xdb\xc8\xb2\xc2\xd3\x67\xa1\x82\x2d\x17\x76\x18\x2a\xf0\x8a\x00\xf2\x8f\x62\x7b\x02\x9b\xfe\x0d\x42\x4e\x49\x09\x8b\x69\x6b\xf4\xe6\x0b\xe0\x4f\x86\x6b\xdf\x49\x33\x94\xcf\xce\x44\x87\xe5\xac\x79\x26\x70\xe0\x5e\xa1\x7c\x76\x66\x3f\x82\x79\x0a\x1d\x1d\x2a\x98\x63\x25\xd8\x17\x5a\xd7\x7e\x6c\xb3\xae\x56\xf3\xf9\x33\x3b\x53\xaf\xa7\xbd\xe0\xab\x71\xdc\x1c\x36\x98\xbc\x49\xb6\x9d\x17\x34\x07\x74\x60\x20\xfc\xaa\x9c\x98\xb4\x34\xd1\xec\x74\x66\xd0\xfb\x72\x0e\xed\x11\xdc\xdf\xf4\x76\xf6\xfc\x87\x53\xaf\x3c\xad\xf5\xe1\x26\x6e\x75\x6a\x01\x53\x14\x7c\x7f\xd2\x09\x2e\x2c\xb4\xee\xaf\x37\xef\xfc\xd8\xbc\xb3\xbe\x7d\xef\xc9\xfe\x61\x1a\x1c\xc7\xfe\xc1\x56\x74\x56\x60\xea\xb9\x2d\x0f\xff\xd4\x4b\x99\x7f\xe5\xf1\x01\xef\x30\x3d\xa0\xc4\xac\x5b\x9d\x3a\xd5\xee\x89\x4f\x64\xd9\xab\x06\xdd\x40\xde\x9a\xf7\x3e\x8b\x5f\xc5\x46\xf3\xcd\xf7\xd8\x00\x7b\xaa\xf5\xe8\x87\x9d\xf5\xef\xe6\x2f\x9c\xd9\x6f\x08\x92\xab\xa7\xed\x30\xe9\xb8\x79\x29\x13\xb9\xdb\x9f\xe1\x7f\x0d\x61\x62\x6e\x30\x52\xc4\x66\x71\x35\x1e\x6b\x87\x85\x78\xff\xf9\xae\x9f\xbf\x70\x26\x75\xf7\x75\x04\x95\x2e\x15\xbb\x46\x96\xd6\x4f\xdf\xcf\x5f\x38\xf3\xe2\xc1\x95\x9d\xad\x7b\xcd\xaf\xbf\x69\x3c\xfb\x76\xfb\xab\x7f\x6c\x5e\xff\xcf\xed\x67\x77\xe5\x4e\x6a\x3e\xf8\xb9\xf9\xf0\xca\x6f\x57\xae\x35\x7f\xbc\xf6\xfb\xaf\x5f\x55\x84\x70\xf9\xb4\xa6\x21\x97\x28\x72\x15\x95\xb8\x2a\x2f\x6a\xc4\xfd\xed\xca\xd5\x70\xcc\x5e\x25\xae\x4a\x5c\xe2\xaa\x14\x8b\x44\xbf\x69\x52\xae\x3a\x0c\xad\xaa\x86\x63\x6b\x3e\x6d\x88\xfb\x5a\x03\x9b\xef\x27\xd3\xb1\x11\x91\x57\xb2\xbd\xa8\x33\x13\x08\xee\x07\x71\x24\x00\x88\x61\x94\x4e\x98\x08\xc2\xc8\xb4\x98\x42\x33\x61\x17\x73\x96\xb9\x0e\x27\xfb\x32\xa8\x3d\x37\xa0\x40\x61\xa8\x56\x53\x00\x43\xb4\x8c\xc1\x30\x19\x03\xc3\x55\x30\xad\x83\x80\x51\x6d\x8d\xf5\xfa\x50\xad\x36\x5c\xf5\x3f\x14\x80\xa9\x09\x94\x7a\x3d\x35\xa9\x09\x8d\x1f\x84\x84\x1d\x56\xec\x4e\xc4\xc6\xc6\x95\x9d\xc7\xb7\x1a\x1b\x57\x1a\x1b\xff\xd1\x7c\xf4\xa8\x79\xe7\xf6\xcb\x73\xe3\xe0\x43\x4d\xee\x8f\x85\x9a\x4e\x93\xf7\x91\xc7\xb9\xff\xbf\x81\x27\xd7\x1b\x78\x72\xa9\x81\x27\x77\x28\x03\x4f\xee\xd0\x06\x9e\xc8\xbf\xbe\x48\xec\xdc\xf9\xbe\x81\x27\xd7\x1b\x78\xba\x4e\xfc\x5c\x74\xe2\x0f\x10\x84\x72\xfb\x13\x84\x72\xbb\x07\xa1\x5c\x5a\x10\xaa\xe6\x54\x3f\x0e\x59\x48\x5b\xe4\x0e\x4d\x8c\x70\x17\x63\x53\xa5\xd8\xcb\xa9\xd8\xf4\x54\x83\x6a\x65\x2c\x66\xcf\xab\x6e\xe5\xb5\x07\xa3\xdc\xe1\x0d\x46\xb9\x94\x60\x94\x1b\x30\x18\xe5\x06\x0d\x46\xb9\x83\x0c\x46\xb9\x37\x3c\x18\x35\xaf\xff\x6f\x73\xed\x1f\x5e\x5c\xbf\xbd\xfd\x6c\xed\x30\x04\xa5\x79\x8e\x19\xf5\xbf\x16\xda\x8b\xcb\xdb\xff\xf6\xb4\xf9\xec\x8b\xed\x7b\x4f\x5a\x9f\xfc\xe2\x7b\xfa\x15\x5c\x78\x63\xeb\x24\x3d\xe2\x56\x9c\x6e\x87\x7d\xf5\x7a\x1a\xad\xc3\xd1\x90\xd2\x29\x36\xc4\xec\xeb\x14\xde\x8b\x79\x9b\x8d\xad\x87\xad\x9b\xdf\x07\x87\x60\x63\xeb\x71\xeb\xea\x7a\x73\xed\xd3\xe6\xf5\x27\x63\xa0\xf9\x74\x73\x67\x6d\x6d\xe7\xf9\xe7\xcd\xeb\x3f\xbc\xd6\xc3\xea\x3c\xe2\x7c\xd9\x61\xe6\xa0\xe0\x36\xd7\x6f\x6c\x7f\x7b\xf5\x80\x91\x0d\xe2\xa1\x1b\x99\x16\x20\x1d\x9b\x2a\xa1\x88\x5b\x31\xd2\x61\x5f\x3a\xd2\xa1\xbe\x81\x90\xee\x14\x3e\x34\x48\x1f\xf0\xd1\xf3\x37\xb8\x58\x71\x9c\xa5\xc3\x70\xea\xb4\x4d\x99\xbf\x70\x66\x6f\x6a\xee\x6b\x32\xb6\xcb\x59\x93\xb4\x49\x92\x24\xd9\x8e\x59\x18\xf7\xa6\xf3\x30\x1e\x1f\x88\x89\xdd\xe2\xbb\x73\x31\xf5\xab\xed\xc6\xf3\x7f\x9a\x06\x51\xda\x64\xa8\x25\x71\xe9\x92\x7f\x77\xff\xbb\xb9\x93\xef\x9f\xfa\xdb\xbf\x57\x39\xa6\xe6\xbb\x52\x8d\xde\xd8\x78\xda\xd8\xdc\x9c\x3d\x5f\x9d\x6a\x7e\x76\xbf\xb1\x79\xe3\x48\x4d\x5e\xff\x8e\x9b\x26\xab\x8f\xb5\xbe\xfe\x9f\xd6\x97\x3f\x6f\x3f\xfd\xbc\xf5\xcd\x83\xe9\x60\xe0\x82\xff\xdb\x77\x3d\x5f\x64\x5a\xfa\xd2\xad\x7b\xeb\xad\x5b\x57\x65\x12\xf8\xd9\xfd\x17\x1f\x7f\x96\x54\x07\x3a\x54\x84\xcd\x30\x71\x68\xb7\x73\x49\xd9\x5c\xa7\x6c\x98\xb6\xa4\x27\x14\xaf\xf1\x50\x6d\x43\x76\x01\x5f\xf2\x30\x17\x27\xe4\x36\xd9\x93\xc3\x09\xe1\x57\x93\x0b\xa6\x19\xd9\x41\xf3\x8e\x91\x5d\x12\xc3\x5e\xf1\x64\x7a\xa8\xf6\x0e\xbf\x6c\x0e\xd8\x6f\xc1\x3f\xbb\x33\x6a\x50\xca\xc1\x69\x18\x9c\xdf\x3e\xf9\x7f\xf9\x6f\xc9\xff\x8d\xcd\x04\x61\xe1\x18\x34\x31\x77\xe1\x34\xec\xd8\x08\x9d\x34\x86\xf5\x5d\x36\x43\xc2\xe2\xc6\xc6\xe6\xf6\xbf\x6f\xbe\x77\xea\xe2\xce\xfa\x2f\xad\xff\xba\xf6\xfb\xaf\xb7\x1a\x1b\xb7\x83\xce\xf3\x1f\xcc\xb5\x7b\x7f\xbb\x72\xad\x6b\xff\x34\xef\xdc\x6a\x6c\xdc\x3c\x10\xbe\x0f\x12\x5a\x0e\xb6\x36\x27\xaf\x05\xd5\x40\x29\xf6\xa4\x94\x14\x75\x94\x11\xb9\x31\xf6\x54\x28\xcb\x7e\x31\x9a\x62\xc9\xbf\x01\x07\x8a\x0c\xa3\xa5\xf4\x7a\x26\xdf\x26\x7f\x1a\x27\x97\xf1\x34\x98\x98\x8c\xbe\xd3\xb0\x9c\xb2\x5f\xf4\xe7\xee\x5e\x44\x25\x0f\x21\xff\x35\xf2\x61\x75\xa0\x14\x18\xce\x94\x3c\x6a\x08\xe2\xd0\xcc\x68\xad\x3d\x7f\x38\x03\xd5\x84\x97\x46\x55\x87\x66\x46\xfc\x5f\x51\x47\xc6\x22\x69\x3c\x0a\x6a\xd1\x9b\x61\xd5\x65\xb8\x8a\xa9\x98\xc1\x25\xe4\x59\x22\x33\xfa\x4e\x34\x36\x9c\x19\x91\x21\x78\x64\x54\x45\x94\xd8\x48\xe0\x4c\x0d\x70\x83\x39\x96\x75\x51\xbe\xd9\x38\xa8\x8f\x81\xc9\xf1\xf1\xe4\x0c\x15\x2d\xa2\x95\x4c\x2d\x81\xa9\x8d\x45\xc5\x31\xa7\x01\x94\xb4\x83\x63\x89\x11\x8f\x59\xd3\x00\x6a\x1c\x55\x71\x47\xbf\x89\x04\x9a\x96\x8b\x4b\xb4\x46\x46\x55\x8e\x19\x41\x16\xb9\x8c\x33\xa3\x49\xb1\x76\x3d\xd5\x34\x08\x5f\x0c\x64\x82\x4a\xa9\xe4\xeb\xb5\x5f\x43\xf5\x4b\xb0\x46\x46\x55\x83\xf3\x4c\x58\x79\x05\xc7\x00\x2c\x5a\x8e\xb1\x04\x13\x6f\x20\xff\x91\x52\xa8\x0a\xfc\x45\xd7\x01\x74\x96\x60\xb7\xce\x4e\xad\xc8\x34\x4f\x4a\x7a\x64\x82\x82\x2f\xc5\x94\x57\x56\x06\xbb\xeb\x2c\x86\x33\x23\x47\xa2\x62\xae\x91\x51\xb5\x22\x6c\x2b\xb4\xb9\x43\xb4\x0e\xb0\xc5\x71\xcf\x92\x9a\x06\x9c\xa5\xae\x3e\x8e\xc5\x45\x62\x63\xc7\x13\x29\x74\x18\xcc\x07\x7e\x21\x65\x97\x0b\x40\x1b\xdb\xf1\x2e\xc3\x86\x92\x02\x89\x06\x66\xcc\x61\x31\x14\x99\xc5\x4b\x1f\x9d\xbe\xd0\xed\x34\xdf\x80\x60\x48\xe5\x02\x09\x8f\x5f\xc4\x2b\xa2\x63\xe5\x78\x81\x7a\xb8\x72\x7d\x34\xd8\xc1\xe1\x67\x15\x31\x50\xc4\x25\x87\x61\xff\x57\x5c\x1d\xc2\xa0\x3f\xa2\x41\x6f\xa1\x54\x64\x87\xe9\x18\x9e\x8d\xa9\x50\xcb\x58\x9c\xb2\xb0\x7c\x3c\xb1\x3a\x6b\x66\xda\x3f\x08\x8f\xaa\x26\xf1\x4b\x35\x4d\x1d\xf8\xb5\x9a\xed\x69\x92\x10\x89\x25\x63\x9f\xec\xa9\x2f\xc8\xda\x92\xf6\x0e\xed\x65\x4a\xe2\x97\xf3\x51\x95\x50\x8a\xd9\xe9\x8b\x67\xcf\x00\x1d\xc0\xe3\x3e\xe1\xdf\xc7\xab\x60\x76\x06\x0e\xa0\x26\xf9\x1b\x72\x5f\x55\xed\x9f\x6f\x07\x50\x17\x04\xc1\x2e\x45\x79\x04\x04\x62\x65\x2c\xf4\x91\x85\xa2\x85\xe8\xd2\x48\x50\x20\x3c\x12\xa6\x83\x0c\xd9\xaa\xe1\x50\xee\x58\x58\x45\x16\x59\xf5\xa8\x9f\x19\xda\x88\xa2\x32\xd6\xd0\xd2\xbb\xdc\xb5\xf5\xa3\x13\x6f\xe5\xd4\x89\xec\xb1\x89\x63\xe3\x6f\x4f\xaa\x14\x55\x15\x26\xcf\x56\xd5\x44\x4b\xea\xd4\xb1\x63\x6f\x4d\xe4\xcc\x71\xfb\x34\x3a\x5b\x2e\x8f\x14\x9a\x9f\x7c\xdd\x7c\xba\x09\xa2\x37\xc8\x6b\xa8\x10\x98\x5f\xef\x22\x42\x6f\x41\xd6\x1b\x42\x84\x97\x86\xff\xa2\xb3\x84\xe9\xc1\x61\x1e\xe2\x1d\x00\xa0\x1a\x54\x43\x86\xe1\x78\x54\x68\x42\x2e\x1c\x62\xd8\x5c\xbf\xf1\xe2\x5f\x7e\xe8\x8f\x5f\x7a\x9d\xd6\xde\x18\xf6\x77\x5c\xf8\xca\x09\x18\x80\x3e\x20\x78\x7f\x9c\x39\x82\x0d\x3e\xab\xcd\x0f\x78\xb8\x81\x35\x11\xaf\xa8\x31\x2c\xfe\x4e\x76\x99\x53\x22\x16\xf6\xbf\x64\xf7\xe1\xe5\x21\xbe\x8d\xa7\xdf\x6f\x7f\x7a\x4b\x29\x6c\xff\xfa\xe5\xce\xf3\xbb\xcd\x5b\x9b\xcd\x47\x8f\xc0\xcc\xb9\xb9\x4c\xe3\xd9\xd6\xf6\xbd\x27\xad\x27\x8f\x5b\x0f\xb7\x46\xfb\xe3\xdf\xa7\xee\xeb\x0d\xd9\xc4\xc1\x01\x06\xfc\xe3\xdc\x7c\x49\xd8\x83\x21\x10\xab\x3c\xf8\xbd\x9d\x00\xc7\xa7\x01\x41\xb6\xf6\xae\xe5\xf8\xff\x79\xe7\x72\x45\x31\xe8\x11\xcd\x26\x14\xcb\x9d\x1f\x9c\xd3\x23\x85\xd6\x97\x3f\x37\xbf\xfb\x66\x67\x6d\xeb\xc5\xbf\xae\xf5\xd9\xfb\x32\xb8\x9b\x41\x95\x20\xd0\xc1\x48\xad\x16\x97\xf6\xd5\xeb\x23\x81\x0c\x5f\x26\xc2\xa8\x64\xda\x62\x51\xb2\x63\x20\x1e\x17\xd7\x4e\x27\x52\x8f\xde\x30\x10\x0d\xf9\x69\x7b\x98\x7f\xd4\x3b\x14\x25\x4a\x34\x93\xca\xd2\xcf\xa4\x41\x14\x26\x2b\x08\x93\x1a\xfb\xb0\x7c\x77\x95\x66\x90\xad\x27\xf5\xf4\xa6\x3d\xbb\xa9\xa8\xfb\x37\x8b\xf0\x3e\x31\x94\xb8\x59\x44\xdb\xaf\x8c\xc5\x19\xa7\xcc\xa3\x0d\x37\x2c\x49\x94\x81\x9a\x7f\x6b\x19\x8b\x73\xbd\x76\x06\x9b\xb8\x83\x1c\xf1\x45\x52\x12\x5c\x3f\xa9\x93\x4b\x47\xba\x87\xfc\x14\x76\x96\x0a\xcc\xaa\xc8\xca\xb4\xfb\xc7\xc0\x51\xf0\x57\x60\xc2\xcf\x3f\x93\x56\x6a\x52\x63\xe1\xff\x02\x00\x00\xff\xff\x1d\xbd\x0f\xa7\xc9\x36\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 14025, mode: os.FileMode(420), modTime: time.Unix(1603184753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
