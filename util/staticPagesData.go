// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5c\xff\x73\x13\x47\x96\xff\xdd\x7f\x45\x6f\xe3\x2a\x49\x17\xcf\x8c\x2d\x9b\x59\xd6\x48\xda\x22\x38\x97\x78\x8f\x10\x0a\x43\x6e\xab\xb6\xb6\xd8\xd6\x4c\x4b\x1a\x3c\x9a\x19\xba\x5b\x32\xc6\xa5\x2a\x87\x85\x04\x52\x10\xe0\x8e\x65\x09\x0b\x61\xb9\x4b\x52\xdc\x5d\x62\x67\xaf\xb6\x36\x8e\x09\xe1\x8f\x89\x46\xb2\x7f\xda\x7f\xe1\xaa\xe7\x6b\x8f\x34\x42\x02\x7f\x59\xc2\xe5\x07\x6b\xa6\xfb\xf5\xeb\x37\xef\xf3\xfa\xf5\x67\x7a\x1e\x29\xd4\x58\xdd\x04\x26\xb2\xaa\x45\x78\xa1\x06\x4b\x63\x63\x85\x1a\x46\x7a\x69\x0c\x80\x42\x1d\x33\x04\xb4\x1a\x22\x14\xb3\x22\x6c\xb0\x8a\x74\x08\xc6\x1d\x35\xc6\x1c\x09\x9f\x6b\x18\xcd\x22\xfc\xb5\x74\xfa\x88\x74\xd4\xae\x3b\x88\x19\x65\x13\x43\xa0\xd9\x16\xc3\x16\x2b\xc2\xf9\xb7\x8a\x58\xaf\x62\x61\x9c\x85\xea\xb8\x08\x9b\x06\x5e\x72\x6c\xc2\x04\xd1\x25\x43\x67\xb5\xa2\x8e\x9b\x86\x86\x25\xef\x66\x02\x18\x96\xc1\x0c\x64\x4a\x54\x43\x26\x2e\x4e\xf5\xa9\x41\x0d\x56\xb3\x89\xa0\xe4\xac\x11\xcc\xc5\x0c\x66\xe2\xd2\xdc\xdc\xf1\x05\xe9\xed\xf7\x0a\x8a\x7f\xcb\x3b\x7e\x26\x49\xe0\x4d\xdb\x66\x94\x11\xe4\x80\xa3\x0b\x0b\x40\x92\xbc\x0e\xd3\xb0\x16\x01\xc1\x66\x11\x52\xb6\x6c\x62\x5a\xc3\x98\x41\x50\x23\xb8\x52\x84\x0a\x65\x88\x19\x9a\x52\x0e\x07\xca\x75\xc3\x92\x35\x4a\xe1\xc8\x43\x35\xbb\x5e\xb7\x85\x31\x54\x23\x86\xc3\x00\x25\x5a\x2c\x73\xf6\x5c\x03\x93\x65\x69\x5a\x3e\x28\x4f\x79\x33\x9c\xa5\xb0\x54\x50\x7c\xd1\xd2\x58\x41\xf1\xb1\x19\x2b\x94\x6d\x7d\xd9\xd3\xc2\x1b\x30\xe1\x97\x00\x14\x74\xa3\x09\x34\x13\x51\x5a\x84\x16\x6a\x96\x11\x01\xfe\x8f\xa4\x23\xb2\x08\xca\x55\xff\x97\xd6\x90\x6e\x2f\x49\xb4\x0e\xfd\x61\xc9\x81\xdc\x93\xc8\xb0\x30\x01\xba\x54\x31\xf1\x79\x70\xb6\x41\x99\x51\x59\x96\x02\x17\x4b\x65\xcc\x96\x30\xb6\xa2\xc1\x00\x14\x10\x60\x88\x54\x79\x90\x94\x4d\x64\x2d\x86\x4f\xce\x23\x84\xce\x2a\x4a\xd5\x60\xb5\x46\x59\xd6\xec\xba\x72\x16\x63\x4a\x97\xf3\x8a\xae\x5b\x54\xaa\xda\x30\x69\xae\x54\x26\xc8\xd2\xc3\x89\x91\x69\x54\x2d\xc9\x60\xb8\x4e\x25\x0d\x5b\x0c\x13\x61\x4e\xee\xc0\x66\x15\x9c\xaf\x9b\x16\xf5\x67\x9a\x55\x94\xa5\xa5\x25\x79\x69\x5a\xb6\x49\x55\xc9\x4f\x4e\x4e\x2a\xb4\x59\x85\xc0\x0f\x2b\x98\x9f\x84\xa0\x86\x8d\x6a\x8d\xf9\xd7\x15\xc3\x34\x8b\xd0\xb2\x2d\x0c\x01\x65\xc4\x5e\xc4\x45\xa8\x35\x08\xc1\x16\x3b\x6a\x9b\x36\x81\xc2\x54\x20\x90\x90\x4c\xc3\xc2\x1a\x72\x8a\x90\xd8\x0d\x4b\x87\x62\xf3\x59\xdb\xb0\x7a\xdb\xc3\xa9\x21\x40\xc4\x40\x52\xcd\xd0\x75\x6c\x15\x21\x23\x0d\x1c\x3d\x79\x9d\x48\xf9\xe4\x5c\x7c\x69\xbc\x69\x9f\x2f\xc2\x49\x30\x09\xf2\x33\x20\x3f\x03\x41\xc5\xd6\x1a\x14\x95\x4d\x5c\x84\x15\x64\x52\x9c\xf0\x04\x00\x05\x07\xb1\x1a\xd0\x8b\xf0\xdd\xfc\x34\x98\xfa\x05\xca\x83\x3c\xe0\xa3\xa7\xa4\x3c\xc8\xbf\x33\x2d\xde\x4b\xf9\xf7\x0f\xc5\xf7\x20\x2f\xe5\x6b\x33\x66\x5e\x9a\xae\xa9\x66\x1e\x4c\xd7\x66\xc4\x3e\x90\xbf\x00\x81\xd2\x33\x95\x66\x10\xcd\xc4\x40\x3b\x5f\x84\x53\x79\x08\xb4\xe5\x22\x9c\x9a\x86\x80\x14\xe1\x4c\x8f\x70\x81\x03\x90\x84\x8c\x11\xdb\xaa\xc6\xab\x32\xb8\x8f\x23\x49\x41\x51\x4c\x2a\xba\xd1\x0c\xe2\x3a\xbc\xf4\xe3\xdf\x0f\x77\x2f\x11\x20\xc3\x02\xc4\xe6\x5e\xe1\x97\xdc\xef\xcb\xfe\x0d\xa9\x1a\x96\xc4\x6c\x67\x16\x4c\x1d\x74\xce\x1f\x06\x76\x13\x93\x8a\x69\x2f\xcd\x02\x1f\x84\xc3\xb0\x7f\xc9\x10\x7b\x69\xc0\x8a\x30\xa5\xba\x2e\xa9\xc0\xae\x54\x28\x66\xfc\x7a\x5a\x8c\xfe\x8a\x4d\xea\xa5\x31\xf1\x31\xcb\x0d\xc6\x6c\x2b\x1c\x5f\x66\x16\x28\x33\x4b\x72\x88\x51\x47\x64\x19\xd0\x46\xb9\x6e\xb0\x33\x65\xd6\x67\x70\xd9\x66\xcc\xae\x07\x36\xc3\xd2\x02\x6a\xe2\x82\xe2\x2b\x4b\x4e\x20\x58\x87\x4c\x4c\x18\xf0\xfe\x4a\xb4\xa1\x69\x98\xd2\x48\xad\x6e\x50\xc7\x44\xcb\xb3\x80\x87\xf9\xe1\xde\x98\xf1\x9d\x0f\x0c\xbd\x08\x09\xa6\x0d\x93\xbd\x4b\xab\xb0\xd4\x7e\xf6\xc0\xfd\xfa\x6e\xe7\xca\x4d\xf7\xe3\x87\xfd\x00\x45\x60\x0c\xb0\x86\xa7\x74\x13\xb3\xde\xa9\x6a\x07\x7b\x04\xce\x9c\xe1\x48\xc2\xd2\xdc\xf1\x85\xce\xfd\xeb\xee\xc7\x8f\xdc\x3f\x7c\x58\x50\x6a\x07\x7b\xc6\xf5\x6b\x3e\x73\x86\xa7\x3e\x98\x30\xa0\x57\x94\x03\x22\x55\x89\xdd\x70\x80\x88\xa9\x20\x6c\xa2\x32\x36\x45\x7c\x69\x5d\xca\x03\x7e\xe1\x8d\xf5\xba\x79\xe2\xf5\x2e\x52\xc6\xf7\x44\x07\xad\x4b\x53\x93\x29\xf3\xa4\x98\xa5\xd5\xb0\xb6\x08\xe2\x4b\xc9\xb0\x78\xf6\xe8\x9b\x3b\x45\x17\x00\x05\xc3\x72\x1a\xac\x5f\x9f\xe4\xb5\x43\xc0\x96\x1d\x5c\x84\x04\xe9\x86\x0d\x83\x0d\x72\xce\xa2\xc7\x51\x1d\x43\x0f\x66\x64\x1a\xba\x45\x21\x68\x22\xb3\x81\xe3\x5b\xdb\xd2\x4c\x43\x5b\x0c\x1b\x8e\x72\x95\x58\xff\xe7\x86\x95\xcd\x41\xb0\xb2\x62\x54\x00\x3e\x07\xc6\xe5\xb9\xe3\x0b\x32\xd7\x05\xc2\x81\xad\x96\xe6\x8b\xae\xac\x60\x4b\x6f\xb5\x06\x18\x9d\x70\xb6\x60\xb4\xff\xa4\xdc\x17\x91\x29\xe9\x1a\x00\x38\xe2\x75\x67\xb7\xef\x3e\xdb\xfe\xe8\x5a\x7b\xf3\x56\x2e\x7d\xa6\x41\x78\x25\xb2\xc9\xab\x0c\x90\x6e\x51\xc7\xd6\x23\x80\xc2\xdb\x08\x20\xbf\x61\x38\x40\xc1\xc0\x5d\x04\x28\xd0\x38\x08\xa0\x39\xaf\x3b\xbb\x75\xf9\x87\xad\xb5\xf5\xd7\x18\x20\xcd\xb4\x1b\x7a\xc5\x44\x04\x47\x20\x89\x4d\x11\x50\x71\xe3\x70\xb0\x04\x05\xbb\x08\x98\xa0\x75\x10\x68\x47\x23\x91\xd7\x14\xad\x5a\x03\x2d\x61\xc3\xf3\x44\x04\x57\xa2\x2d\xc2\x4b\x68\x1d\x0e\x98\xa8\x62\x17\x11\x13\xd5\x0e\x82\xcc\xbd\xfe\x49\x7b\x63\xb3\xbd\x79\x6b\xf7\x10\xa3\x75\x64\x9a\x61\xf6\x39\x53\xc3\xa6\x03\x13\x86\x32\x7c\x9e\x01\xfe\x47\xaa\x37\x18\xd6\xbd\xf7\x11\x3e\x24\x65\x5b\x4c\x9b\xa3\x9f\x2f\x80\x97\xdc\xae\x3d\x27\xcd\x59\x74\x7e\x2e\x4a\x96\xf3\xfa\x31\xdf\x81\xc3\xb6\xf2\xf9\xb9\xdd\xd8\xcc\x53\xc2\xd1\xb6\x18\xb1\x4d\x21\xfa\x42\xeb\x82\xcb\x20\xea\x56\x56\xbc\xf8\x99\x9f\x6b\xb5\xd2\x1e\x70\x7f\x1c\xb7\x80\x35\xc2\xdf\x4b\x03\xe7\xf9\xb7\x23\x3a\xd0\x17\xde\x2f\x27\x8a\x96\x0a\xb7\x49\x67\xfa\xad\x3b\x73\x68\x9f\xe0\xee\xd2\xdb\xf9\x13\xef\xcf\xec\x3b\xad\xf5\xe0\x36\x9c\xe6\xcc\x19\x6c\x21\xff\x34\x26\x09\x2e\x2c\x75\xee\xae\xbb\x37\xbf\x74\x6f\xae\x77\x6f\x3f\xde\x3d\x4c\xfd\x74\xec\x25\xb6\xb2\x7d\x1e\xa6\xe6\x6d\x9e\xfc\x53\xdf\xd3\xbc\x57\x1e\x0f\xf0\x84\xe9\x7e\x48\xcc\x3b\xcd\x99\xb7\x82\x96\x38\x23\xf3\x56\xd9\x6f\x06\xfc\x9d\x7a\x78\x2e\xde\x8f\x85\xe6\x99\xdf\x20\x23\xac\xa9\xad\x4f\xbe\x75\x6f\xdc\x99\x3f\xd1\xb9\xf3\x9d\xfb\xfd\x8d\x7d\x7c\xdb\xd8\xbd\xed\x96\x43\xf0\x36\x66\xa7\x96\x9d\x60\xcb\x6d\x10\xf3\x24\x17\xe0\x1d\xd1\x82\xf5\xbc\xe1\xe1\x66\x61\xe0\xc3\x16\x0c\x02\xd0\xc2\x6c\xde\x62\x98\x54\x90\xd6\xcf\x7f\xe2\x0d\xba\x41\xcc\xa3\xfc\x2a\x9b\xe1\xfe\xcd\xe4\x06\x3d\xc2\x28\x1b\x6d\xc2\xc6\xd2\xf6\xea\xbd\xad\x67\x1f\x75\x3e\xf9\xc2\xbd\xf1\x9f\x3e\x22\x7b\x49\x7c\xf6\xd0\xf5\xa2\x27\xfb\x31\x48\xf8\x39\x5a\x44\x2f\x07\x86\x28\xb6\x6b\xa8\xa4\x9b\x1f\xc0\xd3\x7d\x7a\xcb\xbd\xfe\x68\x07\xf0\x88\x19\x4a\x5c\x9c\x69\x1b\x10\x9f\xf8\x34\x97\x89\xb2\x91\x37\xc2\x3b\xc3\xd3\x31\xd5\x88\x51\xc6\x7a\x79\x39\xee\x0b\x58\x53\xbc\x3d\x79\x5e\x3d\x7d\xf2\x58\xea\xe6\xc4\x39\x17\x36\xb1\x36\x60\x13\x8c\x26\x15\x1d\x72\xc6\x1f\x21\x5a\x78\x5c\xc4\x8a\x93\x32\x4f\x62\x08\xc5\xeb\xb1\xf8\xd5\xe5\x79\x9e\xa1\xba\x5d\x47\x86\x45\x87\x67\xd2\x39\x5f\x70\x37\x52\x28\xf7\x00\x22\x18\x0d\x01\x27\x32\x2d\x06\x64\x2e\x6c\x22\xf6\x12\x2d\xc2\xe9\x81\x11\x13\x8c\xf5\x31\x28\x8d\xad\xac\x48\x80\x20\xab\x8a\xc1\xb8\x31\x01\xc6\x9b\x60\xb6\x18\xac\xcb\x40\x63\xab\x35\xb6\xb2\x32\xde\xf4\x7e\x24\x80\x2d\x1d\x48\xad\x56\x6a\xf4\x87\xc6\x8f\x12\x05\x09\x2b\x9e\x1f\x09\xed\x8d\xd5\xad\x47\xd7\xda\x1b\xab\xed\x8d\xff\x76\x1f\x3e\x74\x6f\x5e\xdf\x79\x6c\xec\x3d\xf3\x52\x5f\x8c\x79\x25\x4d\xde\xc5\x38\x56\x7f\xba\x3c\x4c\xed\xe7\x61\x6a\x2a\x0f\x53\x5f\x49\x1e\xa6\xfe\x7f\xe2\x61\xea\x20\x1e\xa6\x0e\xe6\x61\xea\xce\x78\x98\xba\x6b\x3c\x4c\xfd\x49\xf3\x30\x75\x28\x0f\x53\x47\xe0\x61\x2f\x0e\x46\x3a\x0f\xdb\x21\x2a\xe9\xe6\xef\x2f\x0f\x8b\xd2\x8f\x27\x12\xfb\xf9\xf4\x40\x1e\xa6\x0e\xe2\x61\xea\x0e\x79\x98\x3a\x84\x87\xa9\x2f\xcb\xc3\xd4\x9f\x0a\x0f\x53\x5f\x5d\x1e\xa6\xa6\xf0\x30\x75\x44\x1e\xa6\x8e\xca\xc3\xd4\xbd\xe4\x61\xea\x6b\xce\xc3\xdc\xcb\x7f\x73\xd7\x7e\xbf\x7d\xf9\x7a\xf7\xe9\xda\xab\xc0\xc7\x4e\x53\x4c\x2c\xef\x03\xc1\xb0\x58\xee\x7e\xfa\xc4\x7d\xfa\x87\xee\xed\xc7\x9d\x2b\xdf\x7a\x9e\xde\x87\xa3\xcf\xd8\x3a\x1e\x1e\xf1\x5d\x9c\xd1\xc2\xb6\x56\x2b\x2d\xac\xc3\xde\x30\xa4\x53\x6c\x88\xa3\x2f\x29\x3c\x2c\xf2\x36\xdb\xcf\x1e\x74\x3e\xfe\xbc\xfd\xf4\xcf\xdd\x7b\x97\xda\xcf\x1e\x75\x3e\x58\x77\xd7\xae\xba\x97\x1f\x4f\x00\xf7\xc9\xe6\xd6\xda\xda\xd6\x0f\xff\xee\x5e\xfe\xe2\x1f\x9a\xac\x4e\x20\x4a\x97\x6c\xa2\x8f\x0a\xae\xbb\xfe\x61\xf7\xcf\x1f\xec\x31\xb2\xfe\x5e\xe7\x44\xa6\xf9\x48\xc7\xa6\x72\x28\xe2\xbb\x18\xe9\xb0\x2d\x1d\xe9\x50\xdf\x48\x48\x27\x85\x5f\x19\xa4\xf7\x38\xf5\xfc\x2b\x2e\xd7\x6c\x7b\xf1\x55\xc8\x3a\x81\x29\xa7\x4f\x1e\x1b\x1e\x9a\xa7\x4f\x1e\xdb\x97\x5c\x23\xda\xc4\x83\x44\xbc\x8f\xa3\x30\x6e\x4d\x8f\xc3\xb8\x7f\xa4\x48\xec\x15\x7f\x7e\x2c\xa6\x93\xd8\x97\xae\x36\x3c\xb0\xe4\xcf\x0e\x4b\xdd\x8b\xdf\xb9\x1f\x3d\x71\x6f\x5c\xdc\x5a\xfd\xbd\xbb\x76\xb7\x73\xe7\xbb\xc0\xb0\xad\xf5\xbf\x76\xee\x7e\x52\x50\x50\xa9\x50\x26\x4a\xba\x01\x9d\xdb\xeb\x9d\x6b\x1f\x74\xef\x5d\x72\x6f\xdc\xdd\xfe\xe8\xc6\x81\x15\xc3\x69\xce\x1c\xd1\x75\xd2\x9a\x00\xfe\xcd\x49\xaf\x9c\x2a\xba\x0d\xe9\x43\x70\xaf\x8a\xb2\x6a\x52\x36\x24\x2f\xe9\xb4\xe2\x1f\x98\x5a\x03\xff\x9c\xc4\xe7\x1a\x98\xb2\x37\xf9\x62\x19\x1a\xc9\x82\xf0\xfe\x30\xc2\x34\x23\x13\xc1\x9e\xe8\x79\x0e\x3d\xec\x17\x17\x49\xa2\xdc\xdf\xbd\x53\x26\x38\x68\xc2\x97\x58\x1f\x82\x8e\xf6\xc6\x66\xf7\xbf\x36\xdf\x7e\xeb\xd4\xd6\xfa\xb7\x9d\xbf\x5c\xfc\xfb\xf7\xd7\xda\x1b\xd7\xfd\xc6\x13\xef\x2d\x04\xad\x3f\xae\x5e\xec\x89\x68\xf7\xe6\xb5\xf6\xc6\xc7\x7b\x12\x81\xa3\xa4\xfc\xbd\xad\x9e\x2c\x28\x7e\xbd\x66\x8a\x3d\x29\x45\x9f\x89\x42\x4f\x27\x46\xc3\x62\xd2\x92\x57\x4c\x2c\x99\xfc\xaf\x8f\x4a\x99\x60\xb4\x98\x5e\x84\xea\xd9\xe4\x0d\xa3\xc6\x05\x3c\x0b\xa6\xa6\xa3\x63\x36\xd3\xae\x7a\x45\xde\x4e\x8a\x4d\x42\xe5\x2b\x4f\x0b\xde\x63\x14\xc2\x6a\x70\x2e\x30\x9e\xad\x34\x2c\x8d\x19\xb6\x95\xcd\xad\x04\xe3\xc7\xb3\x50\x16\xbc\x94\x93\x6d\x2b\x9b\xf1\x4e\x0c\x32\x13\x91\x34\xce\x81\x95\xe8\xc9\xb0\xec\x10\xdc\xc4\x16\x9b\xc3\x15\xd4\x30\x59\x36\x77\x38\xea\x1b\xcf\x66\xf8\xd6\x98\xc9\xc9\xc8\x32\xea\x88\xe1\xec\x0a\xa0\x1a\xb1\x4d\xf3\x14\x7f\xb2\x49\xd0\x9a\x00\xd3\x93\x93\xe2\x08\x19\x9d\x45\xe7\xb3\x2b\x02\xa6\x75\xcc\x6a\xb6\x3e\x0b\x20\x0f\x3b\x38\x21\xf4\x34\x88\x39\x0b\xa0\x42\x51\x13\x27\xda\x75\xc4\xd0\x2c\x9f\x9c\xa3\x95\xc9\xc9\x14\x13\x03\x99\xc6\x05\x9c\xcd\x89\x62\x41\xc5\xeb\x2c\x08\x1f\x0c\x64\xfd\x5a\x56\xf1\xf1\x82\xc7\x90\xbd\x22\xd9\x4c\x4e\xd6\x28\xcd\x86\xb5\xb1\x70\x02\xc0\xb2\x69\x6b\x8b\x50\x78\x02\xfe\x9f\x51\x09\x55\x81\x9f\x15\x8b\x00\xda\x8b\xb0\x57\x67\x52\x2b\xd2\xf5\xa3\x3c\x3c\xb2\x7e\x49\xae\xa4\xf3\x57\x49\x02\x7b\x2b\xe1\xc6\xb3\x99\x03\x51\xb9\x6d\x26\x27\xd7\x58\xdd\x0c\x6d\x4e\x88\xb6\x00\x36\x29\xee\x9b\x52\x51\x80\xbd\xd8\xd3\x46\x31\x3b\x65\xd4\xb1\xdd\x60\x29\xe1\x30\x9a\x0f\xbc\x42\xf8\x1e\x17\x80\x00\xdb\xc9\x1e\xc3\xc6\x44\x01\xe1\x06\x13\x62\x93\x18\x8a\xec\xd9\x73\xbf\x7e\xe7\x64\xaf\xd3\x3c\x03\xfc\x2e\x99\x32\xc4\x1a\xf4\x14\x3e\xcf\x12\x33\xc7\x13\xb4\xc2\x99\x5b\x39\x7f\x05\x87\xbf\x4d\x44\x40\x19\x57\x6c\x82\xbd\x3a\x9b\x22\x84\x7e\x7b\x14\x06\xfd\xa5\xac\x91\x1d\xba\xad\x35\xea\xd8\x62\x72\x15\xb3\xb7\x4c\xcc\x2f\xdf\x5c\x9e\xd7\xb3\x41\xc9\x4e\x4e\xd6\x0d\xaf\xd4\x5e\x2f\x02\xaf\xd6\x3e\x18\xc6\x03\x42\x98\x32\xf6\xc9\x50\x7d\x3e\x9b\x12\xed\x1d\x1b\x66\x8a\x50\xdb\x94\x93\x0d\xcb\xc2\xe4\x9d\x53\xef\x1e\x03\x45\x00\x8f\x78\x01\xff\x2f\x78\x19\xcc\xcf\xc1\x11\xd4\x88\x55\x3e\x03\x55\x05\x05\x36\x23\xa8\xf3\xb7\xa5\x1e\x45\x31\x25\xcb\x9c\xf1\x38\x59\xc6\xe7\x64\x99\x90\x93\x11\x54\x97\x35\xdb\xa2\xb6\x89\x65\x64\x1a\xcb\x0d\xcb\xe3\x67\x75\x64\xa1\x2a\x56\xd0\xe2\x2f\xa9\x53\x2f\x1e\x9c\xfa\xb9\x2a\x4f\xe5\x0f\x4d\x1d\x9a\xfc\xc5\xb4\x6c\xa1\xa6\x44\x78\x6e\x95\x75\xb4\x28\xcf\x1c\x3a\xf4\xf3\x29\x55\x9f\xac\xbf\x83\xde\xad\x56\x33\x25\xf7\xca\x9f\xdc\x27\x9b\x20\x7a\x02\xce\xd8\x7c\xf3\x5b\x3d\x81\xd0\x5f\x32\xfb\x9a\x04\xc2\x8e\xe1\x3f\x65\x2f\x62\x6b\xef\x30\x0f\xf1\xf6\x01\x90\x35\x4b\x41\x9a\x66\x37\x2c\xa6\x30\x3e\x71\x88\xa1\xbb\xfe\xe1\xf6\xbf\x7d\x31\x18\xbf\xf4\x4a\xda\xe1\x18\x0e\x76\x5c\xf8\xc8\x02\x0c\xa0\x38\x22\x78\x2f\x1e\x39\x8c\x8c\x3e\x2a\x88\x0f\xf8\x6a\x03\xab\x23\x5a\x93\x63\x58\xbc\x95\xec\x10\xbb\x62\x98\x58\x41\x8e\x21\x79\xf0\xd2\x10\xdf\xf6\x93\xcf\xbb\x57\xaf\x49\xa5\xee\xf7\x77\xb6\x7e\xb8\xe5\x5e\xdb\x74\x1f\x3e\x04\x73\xc7\x17\xb2\xed\xa7\xcf\xba\xb7\x1f\x77\x1e\x3f\xea\x3c\x78\x96\x1b\x8c\xff\x80\xca\xdc\xd7\x64\x11\xfb\x09\x0c\x78\xe9\x5c\xdf\x21\xec\x7e\x17\x88\x55\xee\xfd\xda\x16\xc0\xf1\xc2\xc0\x40\x75\xe5\x97\xa6\xed\xfd\x63\xcd\x0b\x35\x49\xb3\x0e\x28\x75\xc3\xc2\x7c\xe5\xfb\x79\x3a\x53\xea\xdc\xf9\xc6\xfd\x8f\xcf\xb6\xd6\x9e\x6d\xff\x71\x6d\xc0\xda\xe7\x9b\xbb\xee\xd7\x71\x83\x22\xc8\xac\xac\xc4\xc5\xd7\xad\x56\xc6\x97\xa1\x4b\x06\xd3\x6a\xd9\x40\x2c\x22\x3b\x1a\xa2\xf1\x3f\x7f\x98\x15\xa8\x47\xff\x36\x10\x75\x79\xb4\x3d\xe4\x1f\xad\x84\x22\xa1\x88\x5e\x54\x96\x9e\x93\x46\x51\x28\xd6\x78\x8b\x1a\x07\x44\xf9\xf3\x55\xea\x3e\x5b\x17\xf5\xf4\xd3\x9e\xe7\xa9\x68\x79\x6f\x16\xe1\xfb\xc4\x98\xf0\x66\x11\x2d\xbf\x2a\x66\xc7\xec\x2a\x8d\x16\xdc\x38\x0f\xa2\x2c\x54\xbc\xb7\x96\x89\x98\xeb\x05\x0c\x56\x78\x07\x39\xe0\x89\xa4\x10\x5c\x8f\xd4\xf1\xa9\x23\xdd\x63\x1e\x85\xf5\xbe\xa2\x35\x91\x99\x0d\xda\x27\xc0\x41\xf0\x4f\x60\xca\xe3\x9f\xe9\x56\xf2\x40\x31\xe2\x32\xb8\x30\x58\xc4\x9a\x36\x1e\x30\x91\xa0\xda\x2f\xa8\x26\x05\x79\x5a\x48\x68\xe4\xd4\x3f\xf1\x35\x36\x74\x44\xff\xb7\x57\xaf\xac\xc6\xe3\xfb\x09\xea\x1e\x7d\x31\x17\xfa\xc7\xe2\xa9\xd4\x97\x9d\x4a\x1d\x32\x95\x1a\x4f\xa5\x28\xc0\x3f\xf1\x12\xbf\xae\x8b\x28\x47\x03\xbd\x53\x9a\x08\xeb\x2c\x3c\x00\xdf\xf0\x9a\xde\x80\xa9\x9f\x41\x07\xbd\x47\xa4\x0c\x6f\x10\x33\x45\x3c\x78\xf5\xf2\xd7\x34\xf7\x88\x7f\xe4\xe4\xf9\xc2\x77\x17\x10\x43\x2a\x59\xbe\x16\xc4\x16\x74\x1f\xfd\x8f\xfb\xe1\xa7\xdd\x7b\x97\x4e\x9f\x3c\xb6\x7d\x7f\x75\xeb\xd9\x6d\xf7\x4f\x9f\xb9\x97\xbf\xea\x3e\xbd\x35\x7f\xe2\xfd\x19\xf7\xfe\x37\xee\x83\xd5\x1f\x57\x2f\xba\x5f\x5e\xfc\xfb\xf7\xf7\xc2\x1c\xc6\xb7\x2a\xae\x4f\x36\x1c\x99\x96\x15\xc3\xf9\x71\xf5\x83\xb0\xaf\xbe\x6c\x38\xb2\xe1\x18\x8e\x6c\x61\x26\xb4\xeb\xba\x45\x65\x9b\xa0\x65\x2f\xdb\x79\xdf\xce\x0d\x27\x78\xdc\x9e\xf7\xb5\xc0\x5c\xf5\x45\xcd\x55\x9f\x6f\xae\x9a\x66\x6e\x53\x95\x3d\x8b\x4d\xa4\x9c\xa5\xb6\x25\xf4\x50\x07\x63\x5d\xb6\x70\x43\x95\xb1\xde\xe0\x24\xac\x8a\xd9\xfc\x09\xd9\xa9\x45\x66\xf7\x05\x89\xf8\x8d\x5f\x0c\x92\xfe\x30\x7c\x4e\xb4\xa4\xc3\x3d\x30\x3a\x46\x0b\xae\x30\x5a\x76\x12\x2c\xfd\x75\x0c\xf3\x27\xc2\x0f\x1b\xee\xfd\xc7\xee\xe7\xf7\xdc\xb5\xa7\xee\xc6\x97\xdd\x7b\x97\xb6\xbe\x5d\xef\xde\xfe\x8b\xfb\xe9\xe3\xf6\xc6\xd7\x3e\x5b\x79\x51\xa8\xd3\x27\xdb\x7e\x72\x77\x6b\xed\x73\x5f\x63\xf7\xab\xaf\xfc\xef\xb9\x31\xf4\xd9\xf6\xc6\xea\xd6\x95\xaf\xda\x1b\x9b\xdb\x0f\x3e\x6b\x6f\xfc\xb5\xf3\xc7\xbf\x75\xef\x5d\xe2\xfd\xb9\x08\xb3\x44\x2e\x8e\xdc\x98\x28\x45\xe8\x4f\xce\x09\x83\x87\xf9\x1e\xd7\x1d\xb6\x1c\x6d\x1f\x46\x25\xe5\x5c\x85\x67\x55\xbf\xf5\x57\xd4\xb6\x40\x11\xfc\x6a\xe1\xbd\xe3\xb2\x83\x08\xc5\x7d\x27\x1a\x15\x9b\x80\xac\x97\x86\x8b\x93\x87\x81\x51\x88\xc7\xc9\x26\xb6\xaa\xac\x76\x18\x18\x6f\xbc\x91\x3c\x2c\x18\xc5\x4c\xe4\x38\xd8\xd2\xb3\x89\x23\x86\xdf\x15\x6c\xc7\x8b\x58\x9f\xaa\x65\xc6\x57\xe2\xd9\x7e\x63\xfc\xd6\x27\x12\x99\xe4\x71\x65\xaa\x4c\xb6\xb7\xf5\x88\xae\x13\x4c\xe9\x6f\x26\x7f\xdb\xca\xf5\x9c\x6b\xfa\x53\x96\x7e\x27\x34\x0b\x87\x1a\xf1\x91\x86\xa2\x80\xed\xd5\xab\xed\x8d\xaf\xa3\x16\x1e\xc9\x30\xda\xb7\x44\x0c\x5b\x2d\xe8\x1f\x3e\xc1\x17\x77\x0c\xdf\x48\x07\x6a\xcd\xf5\x19\xd6\x77\xda\xd4\xb7\x9c\x93\x91\x5d\xa0\x0e\xb2\x82\xa3\xce\x8c\x66\x9b\x36\x99\x05\x04\xeb\x99\x52\xe7\x7f\x1f\x75\xee\x5f\xed\x5c\xfd\xc1\xbd\xf2\x8d\x7b\x63\x9d\x87\xf8\xbd\x4b\xfe\x0a\x28\x28\x7c\x50\x29\x9a\xbd\x25\xd2\x81\xc4\xff\xe5\x82\xd5\xcd\xd2\xff\x05\x00\x00\xff\xff\x70\x33\x37\xf4\x9a\x44\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 17562, mode: os.FileMode(511), modTime: time.Unix(1608470105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
