// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xef\x73\x13\x37\xfa\x7f\x9f\xbf\x42\x15\x99\x89\xf3\x9d\xec\x6e\xe2\x04\x97\xa6\x5e\x77\x0a\xe1\x5b\x32\x07\x94\x21\xa4\xd7\x77\x19\x79\x57\xf6\x2a\xd9\x95\x16\x49\x6b\x27\x78\x3c\x03\x5c\xe9\xaf\x81\x2b\xdc\xd1\x1e\xd7\x96\x52\x3a\x6d\x87\xbb\xb9\x26\xbd\x37\x57\x26\x94\xe6\x8f\x69\x9c\x84\x57\xfd\x17\x6e\xb4\xeb\x5d\xaf\xed\x35\x71\x4b\xa0\x1c\x79\x11\xaf\x1e\x49\x8f\x1e\x3d\x9f\x8f\xf4\x48\xbb\x4f\xd1\x91\x9e\x0b\x5c\x44\xab\x26\xbc\xe0\xc0\xd2\xc8\x48\xd1\xc1\xc8\x2e\x8d\x00\x50\xf4\xb0\x44\xc0\x72\x10\x17\x58\x9a\x30\x90\x15\xed\x08\xec\x54\x38\x52\xfa\x1a\x3e\x1f\x90\x9a\x09\xdf\xd6\x16\x5f\xd7\x8e\x31\xcf\x47\x92\x94\x5d\x0c\x81\xc5\xa8\xc4\x54\x9a\x70\xfe\xb8\x89\xed\x2a\x4e\xf5\xa3\xc8\xc3\x26\xac\x11\x5c\xf7\x19\x97\xa9\xa6\x75\x62\x4b\xc7\xb4\x71\x8d\x58\x58\x0b\x0b\x13\x80\x50\x22\x09\x72\x35\x61\x21\x17\x9b\x53\x7d\x6a\x50\x20\x1d\xc6\x53\x4a\x96\x49\x7b\x2c\x49\xa4\x8b\x4b\x73\x73\xa7\x17\xb4\x37\xde\x2c\x1a\x51\x51\x55\xbc\xa4\x69\xe0\x28\x63\x52\x48\x8e\x7c\x70\x6c\x61\x01\x68\x5a\x58\xe1\x12\xba\x02\x38\x76\x4d\x28\xe4\x9a\x8b\x85\x83\xb1\x84\xc0\xe1\xb8\x62\x42\x43\x48\x24\x89\x65\x94\xe3\x8e\xba\x47\xa8\x6e\x09\x01\x87\xee\x6a\x31\xcf\x63\xa9\x3e\xc2\xe2\xc4\x97\x40\x70\xab\xd3\x66\xf9\x7c\x80\xf9\x9a\x36\xad\x1f\xd6\xa7\xc2\x11\x96\x05\x2c\x15\x8d\xa8\x69\x69\xa4\x68\x44\xd8\x8c\x14\xcb\xcc\x5e\x0b\xb5\x28\x01\xe6\xea\x11\x80\xa2\x4d\x6a\xc0\x72\x91\x10\x26\xa4\xa8\x56\x46\x1c\x44\x3f\x9a\x8d\xf8\x0a\x28\x57\xa3\x5f\xe1\x20\x9b\xd5\x35\xe1\xc1\xa8\x5b\x77\x47\xe5\x49\x44\x28\xe6\xc0\xd6\x2a\x2e\x5e\x05\xcb\x81\x90\xa4\xb2\xa6\xb5\x5d\xac\x95\xb1\xac\x63\x4c\x93\xce\x00\x14\x51\x3c\x55\xd8\x3d\xbc\x56\xe6\x88\xda\xb1\x22\xe4\x92\x2a\xd5\x88\xc4\x9e\xd0\x2c\x4c\x25\xe6\x29\x1d\xca\x21\xb5\x2a\x58\xf5\x5c\x2a\x4c\xa8\xb8\x35\x6b\x18\xf5\x7a\x5d\xaf\x4f\xeb\x8c\x57\x8d\xfc\xe4\xe4\xa4\x21\x6a\x55\x08\x22\x9a\xc0\xfc\x24\x04\x0e\x26\x55\x47\x46\xcf\x15\xe2\xba\x26\xa4\x8c\x62\x08\x84\xe4\x6c\x05\x9b\xd0\x0a\x38\xc7\x54\x1e\x63\x2e\xe3\x30\x35\x14\x68\xb7\xd0\x5c\x42\xb1\x85\x7c\x13\x72\x16\x50\x1b\xa6\xc5\xcb\x8c\xd0\x5e\x79\x3c\x34\x04\x88\x13\xa4\x39\xc4\xb6\x31\x35\xa1\xe4\x01\x4e\x66\xee\x71\x2d\xdf\x3d\x96\xa2\xfa\x51\xb6\x6a\xc2\x49\x30\x09\xf2\x33\x20\x3f\x03\x41\x85\x59\x81\x40\x65\x17\x9b\xb0\x82\x5c\x81\xbb\x3c\x01\x40\xd1\x47\xd2\x01\xb6\x09\x4f\xe5\xa7\xc1\xd4\x2b\x28\x0f\xf2\x40\xf5\x9e\xd2\xf2\x20\x7f\x62\x3a\x5d\xd6\xf2\x6f\x1d\xe9\x94\x41\x5e\xcb\x3b\x33\x6e\x5e\x9b\x76\x0a\x6e\x1e\x4c\x3b\x33\xe9\x3a\x90\xbf\x00\x81\xd1\x33\x94\x45\xb8\xe5\x62\x60\xad\x9a\x70\x2a\x0f\x81\xb5\x66\xc2\xa9\x69\x08\xb8\x09\x67\x54\xe3\xa2\xf2\x7a\x37\x4e\x92\x33\x5a\xed\x2c\xad\x76\xb9\x43\x07\x03\x25\xc4\x32\x6c\x52\x6b\x93\x33\x7e\x8c\x48\x1c\x71\x36\x5c\xcd\x88\x50\xc0\x99\x72\x85\x7a\x54\xce\x5e\x8b\x0a\xbc\x4a\xa8\x26\x99\x3f\x0b\xa6\x0e\xfb\xab\xb0\x9f\xe4\x9c\xd5\x07\x70\xd8\xd5\x3c\x5b\x2b\x00\x56\xa9\x08\x2c\xd5\xf3\x74\x9a\xaf\x15\xc6\xbd\xd2\x48\x7a\x4e\xe5\x40\x4a\x46\xe3\xfe\x65\x49\x41\x59\x52\xcd\xe7\xc4\x43\x7c\x0d\x88\xa0\xec\x11\xb9\x54\x96\x7d\xd6\x95\x99\x94\xcc\x8b\x0c\x7c\x15\x96\x16\x50\x0d\x17\x8d\x48\x59\xf7\x00\x29\xeb\x90\x8b\xb9\x04\xe1\x7f\x4d\x04\x96\x85\x85\x48\xd4\xda\x44\xf8\x2e\x5a\x9b\x05\x8a\xc8\xaf\xf6\xb2\x22\xf2\x34\x20\xb6\x09\x39\x16\x81\x2b\x4f\x89\x2a\x2c\x6d\x6f\xdd\x6e\x7d\x77\x6b\xe7\xfd\xeb\xad\x0f\xef\xf4\xa3\x91\x78\x7e\x80\x35\x6a\x13\x76\xb1\xec\x1d\xca\x39\xdc\xd3\x60\x69\x49\xc1\x06\x4b\x73\xa7\x17\x76\x3e\xbf\xd6\xfa\xf0\x6e\xeb\xe3\x77\x8b\x86\x73\xb8\xa7\x5f\xbf\xe6\xa5\x25\xb5\x59\xc1\x2e\x03\x7a\x9b\x2a\x40\xb4\x2a\x67\x81\x0f\xd2\x98\xa6\x1a\xbb\xa8\x8c\xdd\x34\xbe\xc2\xd3\xf2\x40\x3d\x84\x7d\xc3\x6a\xb5\x55\x86\x0f\x19\xfd\x7b\xd8\x21\x3c\x6d\x6a\x32\x63\x9c\x0c\xb3\x2c\x07\x5b\x2b\xa0\xf3\xa8\x11\xaa\xf6\x87\xbe\xb1\x33\x74\x01\x50\x24\xd4\x0f\x64\xbf\x3e\x2d\x94\x43\x20\xd7\x7c\x6c\x42\x8e\x6c\xc2\x60\x3b\xa4\xcd\x51\x71\x1a\x79\x18\x86\x30\x23\x97\xd8\x54\x40\x50\x43\x6e\x80\x3b\x45\x46\x2d\x97\x58\x2b\xb1\xe0\x98\x52\x89\xed\xff\x0f\x68\x6e\x1c\x82\x46\x83\x54\x00\x3e\x0f\x46\xf5\xb9\xd3\x0b\xba\xd2\x05\xe2\x8e\xcd\xa6\x15\x35\x6d\x34\x30\xb5\x9b\xcd\x01\x46\x77\x39\x3b\x65\x74\x34\x53\xe5\x8b\xc4\x94\x6c\x0d\x00\xbc\x1e\x56\xe7\x1e\xdd\xda\x7a\xf4\xde\xd5\xed\xcd\x1b\xe3\xd9\x23\x0d\xc2\xab\x6b\xeb\x78\x9e\x01\xb2\xa9\xf0\x99\x9d\x00\x14\x17\x13\x80\x22\xc1\xfe\x00\xb5\x3b\x1e\x20\x40\x6d\x8d\x83\x00\x9a\x0b\xab\x73\x7b\x57\x7e\xda\x5b\xdf\x78\x81\x01\xb2\x5c\x16\xd8\x15\x17\x71\x9c\x80\x94\x16\x25\x40\x75\x84\xfb\x83\x95\x52\x70\x80\x80\xa5\xb4\x0e\x02\xed\x58\xd2\xe4\x05\x45\xcb\x09\x50\x1d\x93\xd0\x13\x09\x5c\x5d\xb2\x04\xaf\x94\x74\x7f\xc0\xd2\x2a\x0e\x10\xb1\xb4\xda\x41\x90\xb5\xae\xfd\x79\xfb\xfe\xe6\xf6\xe6\x8d\x17\x14\xb1\x3a\x2e\x3b\x8c\xad\x24\x68\x25\xe5\x04\xa9\xb6\x64\x7f\x94\xe2\xae\x07\x88\x50\xac\x72\x10\x3a\x7f\x8c\xea\x0f\x0e\x1b\xe1\x21\xd7\x8d\x23\xc3\x92\x83\x5d\x1f\x76\x99\x28\xf1\xaa\x04\xea\x9f\xe6\x05\x12\xdb\xe1\xed\x4e\x75\xc9\x38\xb2\x64\x8d\xd1\x7f\x96\x03\xbf\xf1\x28\x15\xba\x67\x8e\x8a\xf9\xb9\x24\x90\xcd\xdb\x27\x23\xd7\xed\x77\xcc\x9a\x9f\x3b\x88\x83\x56\x06\xf1\x18\x95\x9c\xb9\x29\x9e\xc5\xd6\xb5\x1f\xdb\x1c\x6b\x34\x42\xd6\xcc\xcf\x35\x9b\x59\x13\x7c\x36\x8e\x5b\xc0\x16\x57\xb7\xfc\xb6\xf3\xa2\xe2\x90\x0e\x8c\x1a\x3f\x2b\x27\xa6\x2d\x4d\x15\xbb\x9d\x19\x49\x9f\xcc\xa1\x7d\x0d\x0f\xf6\xea\x31\x7f\xe6\xad\x99\x67\x7e\xe5\x08\xe1\x26\x7e\x6d\x66\x09\x53\x14\xbd\xdb\xea\x06\x17\x96\x76\x6e\x6d\xb4\xae\x7f\xdb\xba\xbe\xb1\x7b\xf3\xde\xc1\x61\x1a\x6d\xbc\xe1\x96\x56\x66\xab\x30\x73\x87\x56\xdb\x7c\xe6\x85\x39\xbc\x8e\x86\x80\x77\x99\x1e\x51\x62\xde\xaf\xcd\x1c\x6f\x4b\x3a\xfb\xb0\x92\xea\x91\x18\x48\x1e\xe0\xfd\x77\xe1\x67\xb1\xd0\x42\xf3\x03\x3e\xc4\x9a\xda\xb9\xf3\xcd\xde\xc6\x57\x8b\x67\x4f\x1e\x34\x04\xe9\xd1\xb3\x56\x98\x72\xdc\xa2\x6a\x93\xb8\x3b\xec\x11\xbe\x22\xb2\xb1\xb0\x38\x29\x63\xbb\xbc\xd6\xa9\x6b\x87\x85\xce\xfa\x0b\x5d\xbf\x78\xf6\x64\xe6\xea\xeb\x0a\x2a\x3d\x2a\x1e\x1b\x59\x76\xbe\xfb\x7a\xf1\xec\xc9\x47\x9f\x5f\xdc\xdb\xba\xd9\xfa\xec\x8b\xed\x87\x5f\xee\x7e\xfa\x4e\xeb\xca\xbf\x76\x1f\xde\x50\x2b\xa9\xf5\xf9\xf7\xad\xdb\x17\x7f\xbe\x78\xb9\xf5\xed\xe5\x5f\x7e\xfc\xd4\x91\xd2\x17\xb3\x86\x81\x7c\xa2\xa9\x51\x74\xe2\xeb\xa2\x6c\x10\xff\xe7\x8b\x97\xe2\x3a\x6f\x8d\xf8\x3a\xf1\x89\xaf\x53\x2c\x53\x72\xdb\xa6\x42\x67\x1c\xad\xe9\x16\xf3\x8c\x90\x36\xc4\xff\x5d\x03\x5b\xe8\x27\x9b\x79\x88\xa8\xeb\xf2\x7e\xd4\x99\x8b\x1a\x1e\x04\x71\x14\x00\x88\x63\x94\x4d\x98\x04\xc2\xc4\xb4\x0e\x85\xe6\x62\x11\x67\x75\x61\xc2\xe9\x81\x0c\x6a\xf7\x8d\x28\x50\x1a\x69\x34\x34\xc0\x11\xad\x62\x30\x4a\x26\xc0\x68\x0d\xcc\x9a\x20\x62\x54\x5b\x63\xb3\x39\xd2\x68\x8c\xd6\xc2\x1f\x0d\x60\x6a\x03\xad\xd9\xcc\x3c\xd4\xc4\xc6\x0f\x43\xc2\x2e\x2b\x1e\x4f\xc4\xed\xfb\x17\xf7\xee\x5e\xdd\xbe\x7f\x71\xfb\xfe\x3f\x5b\x77\xee\xb4\xae\x5f\x7b\x72\x6e\x3c\xfd\x50\x53\xf8\x75\xa1\xa6\xdb\xe4\x03\xe4\x71\xe1\x7f\x37\xf0\x14\xfa\x03\x4f\x21\x33\xf0\x14\x9e\xcb\xc0\x53\x78\x6e\x03\x4f\xe2\xdf\xb0\x49\xc7\xb9\x8b\x03\x03\x4f\xa1\x3f\xf0\xf4\xec\xf8\x85\x64\xc7\x1f\x22\x08\x15\x0e\x26\x08\x15\x1e\x1f\x84\x0a\x59\x41\xa8\x56\xd0\xc3\x38\xe4\x22\x63\x59\x30\x9a\xaa\x11\x3e\xc6\xb6\x4e\x71\x50\xd0\xb1\x1d\xe8\x16\x35\xaa\x58\xce\x9f\xd1\x7d\xe7\x77\x0f\x46\x85\xe7\x37\x18\x15\x32\x82\x51\x61\xc8\x60\x54\x18\x36\x18\x15\x9e\x66\x30\x2a\xbc\xe0\xc1\xa8\x75\xe5\x3f\xad\xf5\x3f\x3d\xba\x72\x6d\xf7\xe1\xfa\xf3\x10\x94\x16\x05\xe6\x34\x7c\x01\xb4\x1f\x97\x77\xff\xfe\xa0\xf5\xf0\xe3\xdd\x9b\xf7\x76\xde\xff\x21\xf4\xf4\x33\xb8\xf0\x76\xac\x53\xf4\xe8\x94\x3a\xc7\xed\x58\xd6\x6c\x66\xd1\x3a\xae\x8d\x29\x9d\x61\x43\x87\x7d\xdd\x8d\xf7\x63\xde\xe6\xf6\xd6\xed\x9d\x0f\xbf\x8e\x36\xc1\xed\xad\xbb\x3b\x97\x36\x5a\xeb\x1f\xb4\xae\xdc\x9b\x00\xad\x07\x9b\x7b\xeb\xeb\x7b\x3f\xfd\xb5\x75\xe5\x9b\xdf\x75\xb3\x3a\x83\x84\xa8\x33\x6e\x0f\x0b\x6e\x6b\xe3\xdd\xdd\x2f\x2f\x3d\x65\x64\xa3\x78\xe8\x27\xa6\x45\x48\x77\x4c\x55\x50\x74\x4a\x1d\xa4\x63\x59\x36\xd2\xb1\xbe\xa1\x90\xee\x6e\xfc\xdc\x20\x3d\xcc\xd6\xf3\x74\x3f\x6e\x17\x8d\xe8\x73\x7a\x86\x3d\x19\xdf\xe4\xbb\xbe\xc3\xfb\x1d\x37\x52\xa9\xd5\xc3\x6c\x0e\xcd\x55\xff\x23\x77\x96\x39\x46\x2b\xd9\x09\x01\xa1\x4d\x61\x37\x41\x2e\xe0\x59\x30\x35\x9d\x1c\x3c\x5d\x56\x0d\xb3\x66\xfc\xc7\x67\x21\xa8\x88\x11\x4e\xa3\x18\xa7\xd7\xa8\x06\xa3\xb9\x4a\x40\x2d\x49\x18\xcd\x8d\x37\xda\xfd\x47\x73\x50\x4f\x79\x69\x5c\x67\x34\x37\x16\xbe\xdc\x1e\x9b\x48\x5a\xe3\x71\xd0\x48\x66\x86\x75\x9f\xe3\x1a\xa6\x72\x0e\x57\x50\xe0\xca\xdc\xf8\xab\x49\xdd\x68\x6e\x4c\xed\xce\x63\xe3\x3a\xa2\xc4\x43\x12\xe7\x1a\x40\x58\x9c\xb9\xee\x39\x35\xb3\x49\xd0\x9c\x00\xd3\x93\x93\xe9\x1e\x3a\x5a\x46\xab\xb9\x46\x0a\x53\x0f\x4b\x87\xd9\xb3\x00\x9e\x79\x73\xe1\x1c\x9c\x48\xd5\x04\xdc\x9d\x05\xd0\x10\xa8\x86\xbb\xe4\x36\x92\x68\x56\x0d\xae\xd0\x1a\x1b\xd7\x05\xe6\x04\xb9\xe4\x02\xce\x8d\xa7\x9b\xb5\x13\x12\x66\x41\x3c\x31\x90\x8b\x52\x0d\xd2\xd3\x6b\x4f\x43\x0f\x73\x18\xc6\xc6\x75\x4b\x88\x5c\x9c\xba\x00\x27\x00\x2c\xbb\xcc\x5a\x81\xa9\x19\xa8\x3f\x52\x89\x55\x81\x97\x4c\x13\x40\xb6\x02\x7b\x75\x76\x6b\x45\xb6\x7d\x4c\xd1\x23\x17\x65\x4c\x68\xb6\x3a\x57\x70\xd8\xfb\xa1\x72\x34\x37\x76\x28\xc9\x86\x18\x1b\xd7\x1d\xe9\xb9\xb1\xcd\x5d\x4d\x9b\x00\xbb\x02\xf7\x0d\x69\x18\xa0\xef\x03\x80\xc0\xf2\x1c\xf1\x30\x0b\x64\x06\x1d\x86\xf3\x41\x98\x89\xd4\xe3\x02\xd0\xc6\x76\xb2\xc7\xb0\x91\x74\x83\x54\x01\x73\xce\x78\x07\x8a\xdc\xf2\xf9\xb7\x4f\x9c\xed\x75\x5a\x68\x40\x54\xa5\x0b\x89\x64\x20\xce\xe1\x55\xd9\x35\x72\x67\x80\x66\x3c\x72\x73\x3c\x5a\xc1\xf1\x6f\x0d\x71\x50\xc6\x15\xc6\x71\xf8\xaa\xdd\x84\x30\x92\x27\x34\xe8\xcf\x34\x48\xec\xb0\x99\x15\x78\x98\x4a\xbd\x8a\xe5\x71\x17\xab\xc7\xa3\x6b\xf3\x76\xae\xfd\xd6\x7e\x5c\xb7\x49\x98\xeb\x64\x9b\x20\x4c\x76\x6a\x77\x53\x84\x48\x0d\xd9\xf1\xc9\xbe\xfa\xa2\x0d\x3e\x6d\xef\xc8\x7e\xa6\xa4\x3e\x6f\x8c\xeb\x84\x52\xcc\x4f\x9c\x3b\x75\x12\x98\x00\xbe\x1e\x12\xfe\x0f\x78\x0d\xcc\xcf\xc1\x21\xd4\xa4\x5f\xf4\x0f\x54\xd5\x7e\xc7\x3e\x84\xba\x28\x9e\xf4\x28\x2a\x22\x20\x11\xaf\x62\x69\x8e\x2d\x95\x5d\x44\x57\xc6\xa2\x0c\xbb\xb1\xf8\xaa\xc3\x91\xa7\x5b\x8c\x0a\xe6\x62\x1d\xb9\x64\x2d\xa0\xe1\xab\x37\x0f\x51\x54\xc5\x06\x5a\x79\x4d\xf8\x9e\x79\x78\xea\xe5\x82\x3e\x95\x3f\x32\x75\x64\xf2\x95\x69\x9d\xa2\x9a\xc6\xd5\xde\xaa\xdb\x68\x45\x9f\x39\x72\xe4\xe5\xa9\x82\x3d\xe9\x9d\x40\xa7\xaa\xd5\xb1\x52\xeb\xfd\xcf\x5a\x0f\x36\x41\x32\x83\xa2\x81\x4a\x91\xf9\xcd\x1e\x22\xf4\x67\x34\xbc\x20\x44\x78\x62\xf8\xcf\xb1\x15\x4c\x9f\x1e\xe6\x31\xde\x11\x00\xea\x7a\x8b\x2c\x8b\x05\x54\x1a\x52\x0d\x1c\x63\xd8\xda\x78\xf7\xd1\x5f\xbe\x19\x8c\x5f\x76\xa2\xc3\xfe\x18\x0e\x76\x5c\x3c\xe5\x14\x0c\xc0\x1c\x12\xbc\x5f\xcf\x1c\xc9\x87\xef\xd5\xe6\x07\x7c\xbe\x81\xb5\x91\x70\xf4\x0e\x2c\xe1\x4a\xf6\x39\xab\x10\x17\x87\x6f\x42\x42\x78\x45\x8c\xef\xf6\x83\xaf\x77\x3f\xb8\xaa\x95\x76\x7f\xfc\x64\xef\xa7\x1b\xad\xab\x9b\xad\x3b\x77\xc0\xdc\xe9\x85\xdc\xf6\xc3\x2d\x75\xd3\xba\x77\x77\xe7\xf6\xd6\xf8\x60\xfc\x07\x24\x4e\xbc\x20\x8b\x38\xda\xc0\x40\xb8\x9d\xdb\x4f\x08\x7b\x54\x05\x3a\x2a\x9f\xfe\xda\x4e\x81\x13\xd2\x80\x20\xcf\x78\xcd\x65\x61\xf6\xfb\x05\x47\xb3\xe8\x21\xc3\x23\x14\xab\x95\x1f\xed\xd3\x63\xa5\x9d\x4f\xbe\x6f\x7d\xf5\xc5\xde\xfa\xd6\xa3\xbf\xad\xef\xb7\xf6\x33\x52\x31\x5e\x10\xdc\x17\xcf\x9e\x7c\x42\xb4\xcf\xe2\xf3\x01\x16\xf2\x28\xb3\x7f\x3b\xce\x29\x1d\xdb\xf7\x37\x77\xff\xb1\xf9\xc6\xf1\x73\x7b\x1b\x3f\xec\xfc\xfb\xf2\x2f\x3f\x5e\xdd\xbe\x7f\x2d\x12\xaa\x33\x7b\x24\xfd\xf9\xe2\xe5\x62\x99\x1b\xa5\x9d\x9b\x1b\x3b\x57\x2f\xed\x7e\xfa\x4e\xeb\xa3\x5b\x8f\xde\xfb\xe8\x50\x83\xf8\xb5\x99\xd3\xb8\xde\x9c\x00\xd1\xf3\x9b\xae\x1d\x3f\x17\x52\xf2\x42\x4a\x1e\x7f\x40\x4a\xea\xe2\x72\x17\x15\xd4\x39\xcf\x8e\xf2\x77\x80\x09\xc6\x1a\x8d\x4e\x02\x4e\xb3\x39\x16\xb5\x11\x75\x22\x2d\x27\xd7\x6e\x96\x9c\x7b\x2d\x24\x3a\x89\x8a\xb3\xa9\x53\x68\xff\x89\x20\xa9\x0a\x6f\x70\xf1\x51\xb4\xd9\xa5\x28\x95\xee\x96\x56\x96\x1d\x9e\x86\x51\x98\xce\xc6\x4a\x6b\x1c\xb0\xe1\x0d\xa3\x32\x4e\x1f\x4a\xab\xcb\x58\x43\x8f\x57\x65\x47\x77\xc0\xb4\x8e\xfe\xc3\xf4\xe3\x54\x34\xc3\xfb\x6a\x7c\x4b\x1d\x49\xdd\x57\x93\x85\x5d\xc5\xf2\x24\xab\x8a\x64\x39\x8f\x2a\xca\xe6\xa0\x11\xde\x85\x27\x3a\x37\x88\xf6\xbd\x28\x75\xb3\x3d\x14\x36\xc9\xb8\x36\x85\x57\x05\x35\x74\xa2\x7b\x24\xbc\x18\xcd\x53\x89\x79\x0d\xb9\xb9\xb6\x7c\x02\x1c\x06\xff\x07\xa6\xc2\x5b\x4d\xda\x4a\x43\x69\x2c\xfd\x37\x00\x00\xff\xff\x9d\x10\x1e\x05\x60\x34\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 13408, mode: os.FileMode(420), modTime: time.Unix(1603097404, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
